{"version":3,"sources":["../src/utils/http-client.ts","../src/utils/export-import.ts","../src/utils/relationship-navigation.ts","../src/utils/query-builder.ts","../src/utils/base-resource.ts","../src/resources/tasks.ts","../src/resources/fields.ts","../src/resources/projects.ts","../src/resources/resource-allocations.ts","../src/resources/phases.ts","../src/resources/time-offs.ts","../src/resources/users.ts","../src/resources/spaces.ts","../src/resources/time-tracking.ts","../src/resources/space-documents.ts","../src/client.ts","../src/index.ts"],"names":["HttpClient","config","axios","response","error","rocketlaneError","axiosConfig","attempts","lastError","ms","resolve","url","params","data","ExportUtility","options","filename","fields","includeHeaders","delimiter","encoding","exportFields","csvContent","field","item","row","value","blob","compress","exportData","filtered","jsonContent","sheetName","workbook","y","worksheetData","worksheet","excelBuffer","template","pdfDoc","PDFDocument","helveticaFont","StandardFonts","helveticaBold","page","width","height","yPosition","fontSize","lineHeight","margin","columnWidth","index","rgb","truncatedValue","pdfBytes","xmlContent","escapedValue","result","downloadUrl","stringValue","date","format","year","month","day","ImportUtility","schema","errors","warnings","preview","createMethod","onError","batchSize","dryRun","skipRows","maxRows","imported","processed","skipped","processData","i","batch","batchIndex","rawRow","rowIndex","mappedRow","importError","content","lines","headers","values","header","parsed","binaryString","obj","line","current","inQuotes","char","mapping","mapped","importField","apiField","key","rules","expectedType","NavigableObjectFactory","client","task","navigableTask","project","phase","assignee","user","follower","dep","t","parentTask","entry","total","navigableProject","phaseId","userId","member","tasks","completedTasks","overdueTasks","highPriorityTasks","overallScore","navigableUser","startOfWeek","entries","startOfMonth","dateFrom","dateTo","totalMinutes","totalHours","start","end","daysDiff","navigablePhase","navigableEntry","QueryBuilder","tableName","operator","value2","value1","direction","count","condition","orderField","sql","whereClause","c","orderClause","o","v","processFieldSelection","selection","selectFields","subItem","BaseResource","httpClient","originalParams","listMethod","enhancedResponse","nextParams","nextResponse","allItems","currentResponse","maxPages","currentParams","pageCount","queryBuilder","select","sqlQuery","startTime","sqlTemplate","query","sqlParams","parse","apiParams","filteredData","paramIndex","conditions","orderParts","TasksResource","taskId","projectId","taskIds","assigneeId","builder","status","startDate","endDate","text","today","minutes","assigneeIds","factory","FieldsResource","fieldId","fieldIds","optionId","optionIds","entityType","entityId","type","entity","ProjectsResource","includeFields","newProjectName","companyId","ownerId","projects","ResourceAllocationsResource","allocationId","startDateFrom","startDateTo","PhasesResource","phaseIds","TimeOffsResource","timeOffId","reason","UsersResource","users","SpacesResource","spaceId","visibility","TimeTrackingResource","timeEntryId","categoryId","timerId","SpaceDocumentsResource","documentId","newDocumentName","newSpaceId","version","createdBy","tags","RocketlaneClient","ExportManager","ImportManager","allTasks","allProjects","allUsers","allEntries","createFn","index_default"],"mappings":"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","file":"index.js","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { RocketlaneConfig, RocketlaneError, RequestConfig } from '../types/common';\n\nexport class HttpClient {\n  private client: AxiosInstance;\n  private config: RocketlaneConfig;\n\n  constructor(config: RocketlaneConfig) {\n    this.config = {\n      baseUrl: 'https://api.rocketlane.com',\n      timeout: 30000,\n      retries: 3,\n      ...config,\n    };\n\n    this.client = axios.create({\n      baseURL: this.config.baseUrl || 'https://api.rocketlane.com',\n      timeout: this.config.timeout || 30000,\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n    });\n\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors(): void {\n    this.client.interceptors.response.use(\n      (response: AxiosResponse) => response,\n      (error) => {\n        const rocketlaneError: RocketlaneError = new Error(\n          error.response?.data?.message || error.message || 'An error occurred'\n        );\n        \n        rocketlaneError.statusCode = error.response?.status;\n        rocketlaneError.response = error.response;\n        \n        return Promise.reject(rocketlaneError);\n      }\n    );\n\n    this.client.interceptors.request.use((config) => {\n      (config as any).metadata = { startTime: Date.now() };\n      return config;\n    });\n  }\n\n  async request<T>(config: RequestConfig): Promise<T> {\n    const axiosConfig: AxiosRequestConfig = {\n      method: config.method,\n      url: config.url,\n      data: config.data,\n      params: config.params,\n      ...(config.headers && { headers: config.headers }),\n    };\n\n    let attempts = 0;\n    let lastError: RocketlaneError;\n\n    while (attempts < (this.config.retries || 1)) {\n      try {\n        const response = await this.client.request<T>(axiosConfig);\n        return response.data;\n      } catch (error) {\n        lastError = error as RocketlaneError;\n        attempts++;\n        \n        if (attempts < (this.config.retries || 1) && this.shouldRetry(error as RocketlaneError)) {\n          await this.delay(Math.pow(2, attempts) * 1000);\n          continue;\n        }\n        break;\n      }\n    }\n\n    throw lastError!;\n  }\n\n  private shouldRetry(error: RocketlaneError): boolean {\n    if (!error.statusCode) return true;\n    return error.statusCode >= 500 || error.statusCode === 429;\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async get<T>(url: string, params?: Record<string, unknown>): Promise<T> {\n    return this.request<T>({\n      method: 'GET',\n      url,\n      ...(params && { params }),\n    });\n  }\n\n  async post<T>(url: string, data?: unknown, params?: Record<string, unknown>): Promise<T> {\n    return this.request<T>({\n      method: 'POST',\n      url,\n      ...(data !== undefined && { data }),\n      ...(params && { params }),\n    });\n  }\n\n  async put<T>(url: string, data?: unknown, params?: Record<string, unknown>): Promise<T> {\n    return this.request<T>({\n      method: 'PUT',\n      url,\n      ...(data !== undefined && { data }),\n      ...(params && { params }),\n    });\n  }\n\n  async patch<T>(url: string, data?: unknown, params?: Record<string, unknown>): Promise<T> {\n    return this.request<T>({\n      method: 'PATCH',\n      url,\n      ...(data !== undefined && { data }),\n      ...(params && { params }),\n    });\n  }\n\n  async delete<T>(url: string, params?: Record<string, unknown>): Promise<T> {\n    return this.request<T>({\n      method: 'DELETE',\n      url,\n      ...(params && { params }),\n    });\n  }\n}","// Export/Import utilities for the Rocketlane SDK\nimport * as XLSX from 'xlsx';\nimport { jsPDF } from 'jspdf';\nimport { PDFDocument, rgb, StandardFonts } from 'pdf-lib';\n\nexport type ExportFormat = 'csv' | 'xlsx' | 'json' | 'xml' | 'pdf';\nexport type ImportFormat = 'csv' | 'xlsx' | 'json';\nexport type ErrorHandlingMode = 'stop' | 'skip' | 'collect';\n\nexport interface ExportOptions {\n  format: ExportFormat;\n  filename?: string;\n  fields?: string[];\n  includeHeaders?: boolean;\n  dateFormat?: string;\n  encoding?: string;\n  delimiter?: string; // For CSV\n  sheetName?: string; // For Excel\n  template?: string; // For PDF\n  compress?: boolean;\n}\n\nexport interface ImportOptions {\n  mapping?: Record<string, string>; // Map import fields to API fields\n  validateFirst?: boolean;\n  onError?: ErrorHandlingMode;\n  skipRows?: number;\n  maxRows?: number;\n  dateFormat?: string;\n  batchSize?: number;\n  dryRun?: boolean;\n}\n\nexport interface ExportResult {\n  filename: string;\n  format: ExportFormat;\n  recordCount: number;\n  fileSize: number;\n  downloadUrl?: string;\n  exportedAt: Date;\n  fields: string[];\n}\n\nexport interface ImportResult<T> {\n  success: boolean;\n  imported: T[];\n  errors: ImportError[];\n  skipped: number;\n  total: number;\n  importedAt: Date;\n  dryRun: boolean;\n}\n\nexport interface ImportError {\n  row: number;\n  field?: string;\n  value?: any;\n  error: string;\n  data?: Record<string, any>;\n}\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: ImportError[];\n  warnings: string[];\n  preview: Record<string, any>[];\n}\n\nexport class ExportUtility {\n  /**\n   * Export data to CSV format\n   */\n  static exportToCSV<T>(\n    data: T[],\n    options: Partial<ExportOptions> = {}\n  ): ExportResult {\n    const {\n      filename = `export_${Date.now()}.csv`,\n      fields,\n      includeHeaders = true,\n      delimiter = ',',\n      encoding = 'utf-8'\n    } = options;\n\n    if (data.length === 0) {\n      throw new Error('No data to export');\n    }\n\n    // Determine fields to export\n    const exportFields = fields || Object.keys(data[0] as any);\n    \n    let csvContent = '';\n    \n    // Add headers\n    if (includeHeaders) {\n      csvContent += exportFields.map(field => this.escapeCsvField(field)).join(delimiter) + '\\n';\n    }\n    \n    // Add data rows\n    data.forEach(item => {\n      const row = exportFields.map(field => {\n        const value = (item as any)[field];\n        return this.escapeCsvField(this.formatValue(value, options));\n      });\n      csvContent += row.join(delimiter) + '\\n';\n    });\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=' + encoding });\n    \n    return {\n      filename,\n      format: 'csv',\n      recordCount: data.length,\n      fileSize: blob.size,\n      exportedAt: new Date(),\n      fields: exportFields\n    };\n  }\n\n  /**\n   * Export data to JSON format\n   */\n  static exportToJSON<T>(\n    data: T[],\n    options: Partial<ExportOptions> = {}\n  ): ExportResult {\n    const {\n      filename = `export_${Date.now()}.json`,\n      fields,\n      compress = false\n    } = options;\n\n    let exportData = data;\n\n    // Filter fields if specified\n    if (fields) {\n      exportData = data.map(item => {\n        const filtered: Partial<T> = {};\n        fields.forEach(field => {\n          if (field in (item as any)) {\n            (filtered as any)[field] = (item as any)[field];\n          }\n        });\n        return filtered as T;\n      });\n    }\n\n    const jsonContent = JSON.stringify({\n      metadata: {\n        exportedAt: new Date().toISOString(),\n        recordCount: data.length,\n        fields: fields || Object.keys(data[0] as any)\n      },\n      data: exportData\n    }, null, compress ? 0 : 2);\n\n    const blob = new Blob([jsonContent], { type: 'application/json' });\n    \n    return {\n      filename,\n      format: 'json',\n      recordCount: data.length,\n      fileSize: blob.size,\n      exportedAt: new Date(),\n      fields: fields || Object.keys(data[0] as any)\n    };\n  }\n\n  /**\n   * Export data to Excel format using xlsx library\n   */\n  static exportToExcel<T>(\n    data: T[],\n    options: Partial<ExportOptions> = {}\n  ): ExportResult {\n    const {\n      filename = `export_${Date.now()}.xlsx`,\n      fields,\n      sheetName = 'Sheet1'\n    } = options;\n\n    if (data.length === 0) {\n      throw new Error('No data to export');\n    }\n\n    const exportFields = fields || Object.keys(data[0] as any);\n    \n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    \n    // Prepare data for Excel\n    const worksheetData = [\n      exportFields, // Headers\n      ...data.map(item => \n        exportFields.map(field => this.formatValue((item as any)[field], options))\n      )\n    ];\n    \n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    \n    // Set column widths\n    worksheet['!cols'] = exportFields.map(() => ({ width: 15 }));\n    \n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    \n    // Generate buffer and get size\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' }) as ArrayBuffer;\n\n    return {\n      filename,\n      format: 'xlsx',\n      recordCount: data.length,\n      fileSize: excelBuffer.byteLength,\n      exportedAt: new Date(),\n      fields: exportFields\n    };\n  }\n\n  /**\n   * Export data to PDF format using pdf-lib\n   */\n  static async exportToPDF<T>(\n    data: T[],\n    options: Partial<ExportOptions> = {}\n  ): Promise<ExportResult> {\n    const {\n      filename = `export_${Date.now()}.pdf`,\n      fields,\n      template\n    } = options;\n\n    if (data.length === 0) {\n      throw new Error('No data to export');\n    }\n\n    const exportFields = fields || Object.keys(data[0] as any);\n    \n    // Create PDF document\n    const pdfDoc = await PDFDocument.create();\n    const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n    const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n    \n    let page = pdfDoc.addPage([595, 842]); // A4 size\n    const { width, height } = page.getSize();\n    \n    let yPosition = height - 50;\n    const fontSize = 10;\n    const lineHeight = 14;\n    const margin = 50;\n    const columnWidth = (width - 2 * margin) / exportFields.length;\n    \n    // Draw headers\n    exportFields.forEach((field, index) => {\n      page.drawText(String(field), {\n        x: margin + index * columnWidth,\n        y: yPosition,\n        size: fontSize,\n        font: helveticaBold,\n        color: rgb(0, 0, 0)\n      });\n    });\n    \n    yPosition -= lineHeight * 2;\n    \n    // Draw data rows\n    for (const item of data) {\n      if (yPosition < 50) {\n        page = pdfDoc.addPage([595, 842]);\n        yPosition = height - 50;\n      }\n      \n      exportFields.forEach((field, index) => {\n        const value = this.formatValue((item as any)[field], options);\n        const truncatedValue = value.length > 20 ? value.substring(0, 17) + '...' : value;\n        \n        page.drawText(truncatedValue, {\n          x: margin + index * columnWidth,\n          y: yPosition,\n          size: fontSize,\n          font: helveticaFont,\n          color: rgb(0, 0, 0)\n        });\n      });\n      \n      yPosition -= lineHeight;\n    }\n    \n    const pdfBytes = await pdfDoc.save();\n\n    return {\n      filename,\n      format: 'pdf',\n      recordCount: data.length,\n      fileSize: pdfBytes.byteLength,\n      exportedAt: new Date(),\n      fields: exportFields\n    };\n  }\n\n  /**\n   * Export data to XML format\n   */\n  static exportToXML<T>(\n    data: T[],\n    options: Partial<ExportOptions> = {}\n  ): ExportResult {\n    const {\n      filename = `export_${Date.now()}.xml`,\n      fields,\n      encoding = 'utf-8'\n    } = options;\n\n    if (data.length === 0) {\n      throw new Error('No data to export');\n    }\n\n    const exportFields = fields || Object.keys(data[0] as any);\n    \n    let xmlContent = `<?xml version=\"1.0\" encoding=\"${encoding}\"?>\\n`;\n    xmlContent += `<export>\\n`;\n    xmlContent += `  <metadata>\\n`;\n    xmlContent += `    <exportedAt>${new Date().toISOString()}</exportedAt>\\n`;\n    xmlContent += `    <recordCount>${data.length}</recordCount>\\n`;\n    xmlContent += `    <fields>${exportFields.join(',')}</fields>\\n`;\n    xmlContent += `  </metadata>\\n`;\n    xmlContent += `  <data>\\n`;\n    \n    data.forEach(item => {\n      xmlContent += `    <record>\\n`;\n      exportFields.forEach(field => {\n        const value = this.formatValue((item as any)[field], options);\n        const escapedValue = this.escapeXmlValue(value);\n        xmlContent += `      <${field}>${escapedValue}</${field}>\\n`;\n      });\n      xmlContent += `    </record>\\n`;\n    });\n    \n    xmlContent += `  </data>\\n`;\n    xmlContent += `</export>`;\n\n    const blob = new Blob([xmlContent], { type: 'application/xml' });\n\n    return {\n      filename,\n      format: 'xml',\n      recordCount: data.length,\n      fileSize: blob.size,\n      exportedAt: new Date(),\n      fields: exportFields\n    };\n  }\n\n  /**\n   * Generate export with download capability\n   */\n  static async generateExport<T>(\n    data: T[],\n    options: ExportOptions\n  ): Promise<ExportResult & { blob: Blob; downloadUrl: string }> {\n    let result: ExportResult;\n    let blob: Blob;\n\n    switch (options.format) {\n      case 'csv':\n        result = this.exportToCSV(data, options);\n        blob = this.createCSVBlob(data, options);\n        break;\n      case 'json':\n        result = this.exportToJSON(data, options);\n        blob = this.createJSONBlob(data, options);\n        break;\n      case 'xlsx':\n        result = this.exportToExcel(data, options);\n        blob = this.createExcelBlob(data, options);\n        break;\n      case 'pdf':\n        result = await this.exportToPDF(data, options);\n        blob = await this.createPDFBlob(data, options);\n        break;\n      case 'xml':\n        result = this.exportToXML(data, options);\n        blob = this.createXMLBlob(data, options);\n        break;\n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n\n    const downloadUrl = URL.createObjectURL(blob);\n\n    return {\n      ...result,\n      blob,\n      downloadUrl\n    };\n  }\n\n  private static createCSVBlob<T>(data: T[], options: Partial<ExportOptions>): Blob {\n    const {\n      fields,\n      includeHeaders = true,\n      delimiter = ','\n    } = options;\n\n    if (data.length === 0) {\n      throw new Error('No data to export');\n    }\n\n    const exportFields = fields || Object.keys(data[0] as any);\n    \n    let csvContent = '';\n    \n    if (includeHeaders) {\n      csvContent += exportFields.map(field => this.escapeCsvField(field)).join(delimiter) + '\\n';\n    }\n    \n    data.forEach(item => {\n      const row = exportFields.map(field => {\n        const value = (item as any)[field];\n        return this.escapeCsvField(this.formatValue(value, options));\n      });\n      csvContent += row.join(delimiter) + '\\n';\n    });\n\n    return new Blob([csvContent], { type: 'text/csv' });\n  }\n\n  private static createJSONBlob<T>(data: T[], options: Partial<ExportOptions>): Blob {\n    const {\n      fields,\n      compress = false\n    } = options;\n\n    let exportData = data;\n\n    if (fields) {\n      exportData = data.map(item => {\n        const filtered: Partial<T> = {};\n        fields.forEach(field => {\n          if (field in (item as any)) {\n            (filtered as any)[field] = (item as any)[field];\n          }\n        });\n        return filtered as T;\n      });\n    }\n\n    const jsonContent = JSON.stringify({\n      metadata: {\n        exportedAt: new Date().toISOString(),\n        recordCount: data.length,\n        fields: fields || Object.keys(data[0] as any)\n      },\n      data: exportData\n    }, null, compress ? 0 : 2);\n\n    return new Blob([jsonContent], { type: 'application/json' });\n  }\n\n  private static createExcelBlob<T>(data: T[], options: Partial<ExportOptions>): Blob {\n    const exportFields = options.fields || Object.keys(data[0] as any);\n    const sheetName = options.sheetName || 'Sheet1';\n    \n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    \n    // Prepare data for Excel\n    const worksheetData = [\n      exportFields, // Headers\n      ...data.map(item => \n        exportFields.map(field => this.formatValue((item as any)[field], options))\n      )\n    ];\n    \n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    worksheet['!cols'] = exportFields.map(() => ({ width: 15 }));\n    \n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    \n    // Generate buffer\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' }) as ArrayBuffer;\n    \n    return new Blob([excelBuffer], { \n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n    });\n  }\n\n  private static async createPDFBlob<T>(data: T[], options: Partial<ExportOptions>): Promise<Blob> {\n    const exportFields = options.fields || Object.keys(data[0] as any);\n    \n    const pdfDoc = await PDFDocument.create();\n    const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n    const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n    \n    let page = pdfDoc.addPage([595, 842]);\n    const { width, height } = page.getSize();\n    \n    let yPosition = height - 50;\n    const fontSize = 10;\n    const lineHeight = 14;\n    const margin = 50;\n    const columnWidth = (width - 2 * margin) / exportFields.length;\n    \n    // Draw headers\n    exportFields.forEach((field, index) => {\n      page.drawText(String(field), {\n        x: margin + index * columnWidth,\n        y: yPosition,\n        size: fontSize,\n        font: helveticaBold,\n        color: rgb(0, 0, 0)\n      });\n    });\n    \n    yPosition -= lineHeight * 2;\n    \n    // Draw data rows\n    for (const item of data) {\n      if (yPosition < 50) {\n        page = pdfDoc.addPage([595, 842]);\n        yPosition = height - 50;\n      }\n      \n      exportFields.forEach((field, index) => {\n        const value = this.formatValue((item as any)[field], options);\n        const truncatedValue = value.length > 20 ? value.substring(0, 17) + '...' : value;\n        \n        page.drawText(truncatedValue, {\n          x: margin + index * columnWidth,\n          y: yPosition,\n          size: fontSize,\n          font: helveticaFont,\n          color: rgb(0, 0, 0)\n        });\n      });\n      \n      yPosition -= lineHeight;\n    }\n    \n    const pdfBytes = await pdfDoc.save();\n    \n    return new Blob([pdfBytes] as BlobPart[], { type: 'application/pdf' });\n  }\n\n  private static createXMLBlob<T>(data: T[], options: Partial<ExportOptions>): Blob {\n    const exportFields = options.fields || Object.keys(data[0] as any);\n    const encoding = options.encoding || 'utf-8';\n    \n    let xmlContent = `<?xml version=\"1.0\" encoding=\"${encoding}\"?>\\n`;\n    xmlContent += `<export>\\n`;\n    xmlContent += `  <metadata>\\n`;\n    xmlContent += `    <exportedAt>${new Date().toISOString()}</exportedAt>\\n`;\n    xmlContent += `    <recordCount>${data.length}</recordCount>\\n`;\n    xmlContent += `    <fields>${exportFields.join(',')}</fields>\\n`;\n    xmlContent += `  </metadata>\\n`;\n    xmlContent += `  <data>\\n`;\n    \n    data.forEach(item => {\n      xmlContent += `    <record>\\n`;\n      exportFields.forEach(field => {\n        const value = this.formatValue((item as any)[field], options);\n        const escapedValue = this.escapeXmlValue(value);\n        xmlContent += `      <${field}>${escapedValue}</${field}>\\n`;\n      });\n      xmlContent += `    </record>\\n`;\n    });\n    \n    xmlContent += `  </data>\\n`;\n    xmlContent += `</export>`;\n    \n    return new Blob([xmlContent], { type: 'application/xml' });\n  }\n\n  private static escapeCsvField(value: string): string {\n    if (value == null) return '';\n    const stringValue = String(value);\n    if (stringValue.includes(',') || stringValue.includes('\"') || stringValue.includes('\\n')) {\n      return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n    }\n    return stringValue;\n  }\n\n  private static formatValue(value: any, options: Partial<ExportOptions>): string {\n    if (value == null) return '';\n    \n    if (value instanceof Date) {\n      return options.dateFormat \n        ? this.formatDate(value, options.dateFormat)\n        : value.toISOString();\n    }\n    \n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    \n    return String(value);\n  }\n\n  private static formatDate(date: Date, format: string): string {\n    // Simple date formatting - would use a proper library in production\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    \n    return format\n      .replace('YYYY', String(year))\n      .replace('MM', month)\n      .replace('DD', day);\n  }\n\n  private static escapeXmlValue(value: string): string {\n    if (value == null) return '';\n    return String(value)\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n  }\n}\n\nexport class ImportUtility {\n  /**\n   * Validate import data before processing\n   */\n  static async validateImportData<T>(\n    data: any[],\n    schema: Record<string, any>,\n    options: ImportOptions = {}\n  ): Promise<ValidationResult> {\n    const errors: ImportError[] = [];\n    const warnings: string[] = [];\n    \n    if (!Array.isArray(data)) {\n      return {\n        valid: false,\n        errors: [{ row: 0, error: 'Invalid data format: expected array' }],\n        warnings: [],\n        preview: []\n      };\n    }\n\n    // Validate each row\n    data.forEach((row, index) => {\n      this.validateRow(row, schema, index + 1, errors, options);\n    });\n\n    const preview = data.slice(0, 5).map(row => this.mapFields(row, options.mapping));\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      preview\n    };\n  }\n\n  /**\n   * Import data from parsed content\n   */\n  static async importData<T>(\n    data: any[],\n    createMethod: (item: any) => Promise<T>,\n    options: ImportOptions = {}\n  ): Promise<ImportResult<T>> {\n    const {\n      onError = 'stop',\n      batchSize = 10,\n      dryRun = false,\n      skipRows = 0,\n      maxRows\n    } = options;\n\n    const imported: T[] = [];\n    const errors: ImportError[] = [];\n    let processed = 0;\n    let skipped = skipRows;\n\n    // Skip initial rows if specified\n    const processData = data.slice(skipRows, maxRows ? skipRows + maxRows : undefined);\n\n    // Process in batches\n    for (let i = 0; i < processData.length; i += batchSize) {\n      const batch = processData.slice(i, i + batchSize);\n      \n      for (let batchIndex = 0; batchIndex < batch.length; batchIndex++) {\n        const rawRow = batch[batchIndex];\n        const rowIndex = skipped + i + batchIndex + 1;\n        \n        try {\n          const mappedRow = this.mapFields(rawRow, options.mapping);\n          \n          if (!dryRun) {\n            const result = await createMethod(mappedRow);\n            imported.push(result);\n          }\n          processed++;\n        } catch (error) {\n          const importError: ImportError = {\n            row: rowIndex,\n            error: error instanceof Error ? error.message : String(error),\n            data: rawRow\n          };\n          \n          errors.push(importError);\n          \n          if (onError === 'stop') {\n            break;\n          } else if (onError === 'skip') {\n            skipped++;\n            continue;\n          }\n          // 'collect' continues processing\n        }\n      }\n      \n      if (onError === 'stop' && errors.length > 0) {\n        break;\n      }\n    }\n\n    return {\n      success: errors.length === 0,\n      imported,\n      errors,\n      skipped,\n      total: processData.length,\n      importedAt: new Date(),\n      dryRun\n    };\n  }\n\n  /**\n   * Parse CSV content\n   */\n  static parseCSV(content: string, delimiter: string = ','): any[] {\n    const lines = content.trim().split('\\n');\n    if (lines.length === 0) return [];\n\n    const headers = this.parseCSVLine(lines[0] || '', delimiter);\n    const data: any[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = this.parseCSVLine(lines[i] || '', delimiter);\n      const row: any = {};\n      \n      headers.forEach((header, index) => {\n        if (header != null) {\n          row[header.trim()] = values[index]?.trim() || null;\n        }\n      });\n      \n      data.push(row);\n    }\n\n    return data;\n  }\n\n  /**\n   * Parse JSON content\n   */\n  static parseJSON(content: string): any[] {\n    try {\n      const parsed = JSON.parse(content);\n      \n      if (Array.isArray(parsed)) {\n        return parsed;\n      }\n      \n      if (parsed.data && Array.isArray(parsed.data)) {\n        return parsed.data;\n      }\n      \n      throw new Error('Invalid JSON format: expected array or object with data array');\n    } catch (error) {\n      throw new Error(`JSON parsing error: ${error}`);\n    }\n  }\n\n  /**\n   * Parse Excel content using xlsx library\n   */\n  static parseExcel(content: string | ArrayBuffer): any[] {\n    try {\n      let workbook: XLSX.WorkBook;\n      \n      if (typeof content === 'string') {\n        // If content is base64 string, decode it first  \n        const binaryString = typeof atob !== 'undefined' ? atob(content) : content;\n        workbook = XLSX.read(binaryString, { type: 'binary' });\n      } else {\n        // If content is ArrayBuffer\n        workbook = XLSX.read(content, { type: 'array' });\n      }\n      \n      // Get the first worksheet\n      const sheetName = workbook.SheetNames[0];\n      if (!sheetName) {\n        throw new Error('No worksheets found in Excel file');\n      }\n      \n      const worksheet = workbook.Sheets[sheetName];\n      if (!worksheet) {\n        throw new Error('Worksheet not found');\n      }\n      \n      // Convert to JSON with header row as keys\n      const data = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1, // Use first row as header\n        defval: null, // Default value for empty cells\n        blankrows: false // Skip blank rows\n      }) as any[][];\n      \n      if (data.length === 0) {\n        return [];\n      }\n      \n      const headers = data[0];\n      if (!headers || headers.length === 0) {\n        throw new Error('No headers found in Excel file');\n      }\n      \n      const rows = data.slice(1);\n      \n      return rows.map(row => {\n        const obj: any = {};\n        headers.forEach((header, index) => {\n          if (header != null) {\n            obj[String(header)] = row[index] || null;\n          }\n        });\n        return obj;\n      });\n    } catch (error) {\n      throw new Error(`Excel parsing error: ${error}`);\n    }\n  }\n\n  private static parseCSVLine(line: string, delimiter: string): string[] {\n    const values: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          current += '\"';\n          i++; // Skip next quote\n        } else {\n          inQuotes = !inQuotes;\n        }\n      } else if (char === delimiter && !inQuotes) {\n        values.push(current);\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    values.push(current);\n    return values;\n  }\n\n  private static mapFields(row: any, mapping?: Record<string, string>): any {\n    if (!mapping) return row;\n    \n    const mapped: any = {};\n    \n    for (const [importField, apiField] of Object.entries(mapping)) {\n      if (importField in row) {\n        mapped[apiField] = row[importField];\n      }\n    }\n    \n    // Include unmapped fields\n    for (const [key, value] of Object.entries(row)) {\n      if (!mapping[key] && !(Object.values(mapping).includes(key))) {\n        mapped[key] = value;\n      }\n    }\n    \n    return mapped;\n  }\n\n  private static validateRow(\n    row: any,\n    schema: Record<string, any>,\n    rowIndex: number,\n    errors: ImportError[],\n    options: ImportOptions\n  ): void {\n    // Basic validation - would be more sophisticated in production\n    for (const [field, rules] of Object.entries(schema)) {\n      const value = row[field];\n      \n      if (rules.required && (value == null || value === '')) {\n        errors.push({\n          row: rowIndex,\n          field,\n          value,\n          error: `${field} is required`\n        });\n      }\n      \n      if (rules.type && value != null) {\n        if (!this.validateType(value, rules.type)) {\n          errors.push({\n            row: rowIndex,\n            field,\n            value,\n            error: `${field} must be of type ${rules.type}`\n          });\n        }\n      }\n    }\n  }\n\n  private static validateType(value: any, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'number':\n        return !isNaN(Number(value));\n      case 'boolean':\n        return typeof value === 'boolean' || value === 'true' || value === 'false';\n      case 'date':\n        return !isNaN(Date.parse(value));\n      case 'email':\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n      default:\n        return true;\n    }\n  }\n}","// Relationship navigation utilities for intuitive object traversal\n\nimport type { RocketlaneClient } from '../client';\nimport type { Task, TasksListResponse, TasksQueryParams } from '../types/tasks';\nimport type { Project, ProjectsListResponse, ProjectsQueryParams } from '../types/projects';\nimport type { User, UsersListResponse, UsersQueryParams } from '../types/users';\nimport type { Phase, PhasesListResponse, PhasesQueryParams } from '../types/phases';\nimport type { TimeEntry, TimeEntriesListResponse, TimeEntriesQueryParams } from '../types/time-tracking';\n\n// Enhanced types with navigation capabilities\nexport interface NavigableTask extends Task {\n  // Project navigation\n  getProject(): Promise<NavigableProject>;\n  \n  // Phase navigation\n  getPhase(): Promise<NavigablePhase | null>;\n  \n  // User navigation\n  getAssignees(): Promise<NavigableUser[]>;\n  getFollowers(): Promise<NavigableUser[]>;\n  getCreatedBy(): Promise<NavigableUser>;\n  getUpdatedBy(): Promise<NavigableUser>;\n  \n  // Related tasks\n  getDependencies(): Promise<NavigableTask[]>;\n  getDependents(): Promise<NavigableTask[]>;\n  getSiblings(): Promise<NavigableTask[]>;\n  getSubtasks(): Promise<NavigableTask[]>;\n  getParent(): Promise<NavigableTask | null>;\n  \n  // Time tracking\n  getTimeEntries(): Promise<NavigableTimeEntry[]>;\n  getTotalTimeSpent(): Promise<number>;\n  \n  // Utility methods\n  isOverdue(): boolean;\n  isHighPriority(): boolean;\n  getProgressPercentage(): number;\n  \n  // Client reference for API calls\n  _client: RocketlaneClient;\n}\n\nexport interface NavigableProject extends Project {\n  // Task navigation\n  getTasks(params?: Omit<TasksQueryParams, 'projectId'>): Promise<NavigableTask[]>;\n  getOverdueTasks(): Promise<NavigableTask[]>;\n  getTasksByPhase(phaseId: number): Promise<NavigableTask[]>;\n  getTasksByAssignee(userId: number): Promise<NavigableTask[]>;\n  \n  // Phase navigation\n  getPhases(): Promise<NavigablePhase[]>;\n  getActivePhases(): Promise<NavigablePhase[]>;\n  \n  // Team navigation\n  getTeamMembers(): Promise<NavigableUser[]>;\n  getOwner(): Promise<NavigableUser>;\n  \n  // Time tracking\n  getTimeEntries(params?: Omit<TimeEntriesQueryParams, 'projectId'>): Promise<NavigableTimeEntry[]>;\n  getTotalTimeSpent(): Promise<number>;\n  \n  // Analytics\n  getCompletionPercentage(): Promise<number>;\n  getProjectHealth(): Promise<ProjectHealth>;\n  \n  // Client reference\n  _client: RocketlaneClient;\n}\n\nexport interface NavigableUser extends User {\n  // Task navigation\n  getAssignedTasks(params?: Omit<TasksQueryParams, 'assigneeId'>): Promise<NavigableTask[]>;\n  getFollowedTasks(): Promise<NavigableTask[]>;\n  getOverdueTasks(): Promise<NavigableTask[]>;\n  \n  // Project navigation\n  getProjects(): Promise<NavigableProject[]>;\n  getOwnedProjects(): Promise<NavigableProject[]>;\n  \n  // Time tracking\n  getTimeEntries(params?: Omit<TimeEntriesQueryParams, 'userId'>): Promise<NavigableTimeEntry[]>;\n  getTotalHoursThisWeek(): Promise<number>;\n  getTotalHoursThisMonth(): Promise<number>;\n  \n  // Workload analysis\n  getWorkloadAnalysis(dateFrom: string, dateTo: string): Promise<WorkloadAnalysis>;\n  \n  // Client reference\n  _client: RocketlaneClient;\n}\n\nexport interface NavigablePhase extends Phase {\n  // Task navigation\n  getTasks(params?: Omit<TasksQueryParams, 'phaseId'>): Promise<NavigableTask[]>;\n  getCompletedTasks(): Promise<NavigableTask[]>;\n  getPendingTasks(): Promise<NavigableTask[]>;\n  \n  // Project navigation\n  getProject(): Promise<NavigableProject>;\n  \n  // Phase sequence navigation\n  getNextPhase(): Promise<NavigablePhase | null>;\n  getPreviousPhase(): Promise<NavigablePhase | null>;\n  \n  // Analytics\n  getCompletionPercentage(): Promise<number>;\n  getEstimatedTimeRemaining(): Promise<number>;\n  \n  // Client reference\n  _client: RocketlaneClient;\n}\n\nexport interface NavigableTimeEntry extends TimeEntry {\n  // Related entity navigation\n  getProject(): Promise<NavigableProject>;\n  getPhase(): Promise<NavigablePhase | null>;\n  getTask(): Promise<NavigableTask | null>;\n  getUser(): Promise<NavigableUser>;\n  \n  // Client reference\n  _client: RocketlaneClient;\n}\n\n// Analytics types\nexport interface ProjectHealth {\n  overallScore: number; // 0-100\n  tasksOnTrack: number;\n  tasksAtRisk: number;\n  tasksOverdue: number;\n  teamUtilization: number;\n  budgetUtilization?: number;\n  estimatedCompletionDate?: string;\n  risks: string[];\n  recommendations: string[];\n}\n\nexport interface WorkloadAnalysis {\n  totalHours: number;\n  averageHoursPerDay: number;\n  peakDays: Array<{ date: string; hours: number }>;\n  projectBreakdown: Array<{ project: string; hours: number; percentage: number }>;\n  utilizationScore: number; // 0-100\n  recommendations: string[];\n}\n\n// Factory class to create navigable objects\nexport class NavigableObjectFactory {\n  constructor(private client: RocketlaneClient) {}\n\n  createNavigableTask(task: Task): NavigableTask {\n    const navigableTask = task as NavigableTask;\n    navigableTask._client = this.client;\n\n    // Project navigation\n    navigableTask.getProject = async () => {\n      const project = await this.client.projects.get(task.project.projectId);\n      return this.createNavigableProject(project);\n    };\n\n    // Phase navigation\n    navigableTask.getPhase = async () => {\n      if (!task.phase) return null;\n      const phase = await this.client.phases.getPhase(task.phase.phaseId);\n      return this.createNavigablePhase(phase);\n    };\n\n    // User navigation\n    navigableTask.getAssignees = async () => {\n      if (!task.assignees) return [];\n      const users = await Promise.all(\n        task.assignees.map(assignee => this.client.users.getUser(assignee.userId))\n      );\n      return users.map((user: any) => this.createNavigableUser(user));\n    };\n\n    navigableTask.getFollowers = async () => {\n      if (!task.followers) return [];\n      const users = await Promise.all(\n        task.followers.map(follower => this.client.users.getUser(follower.userId))\n      );\n      return users.map((user: any) => this.createNavigableUser(user));\n    };\n\n    navigableTask.getCreatedBy = async () => {\n      const user = await this.client.users.getUser(task.createdBy.userId);\n      return this.createNavigableUser(user);\n    };\n\n    navigableTask.getUpdatedBy = async () => {\n      const user = await this.client.users.getUser(task.updatedBy.userId);\n      return this.createNavigableUser(user);\n    };\n\n    // Related tasks\n    navigableTask.getDependencies = async () => {\n      if (!task.dependencies) return [];\n      const tasks = await Promise.all(\n        task.dependencies.map((dep: any) => this.client.tasks.get(dep.dependentTaskId))\n      );\n      return tasks.map((t: any) => this.createNavigableTask(t));\n    };\n\n    navigableTask.getDependents = async () => {\n      // Find tasks that depend on this task\n      const allTasks = await this.client.tasks.getAllTasks({\n        projectId: task.project.projectId\n      });\n      const dependents = allTasks.filter((t: any) => \n        t.dependencies?.some((dep: any) => dep.dependentTaskId === task.taskId)\n      );\n      return dependents.map((t: any) => this.createNavigableTask(t));\n    };\n\n    navigableTask.getSiblings = async () => {\n      let params: TasksQueryParams = { projectId: task.project.projectId };\n      if (task.phase) {\n        params.phaseId = task.phase.phaseId;\n      }\n      \n      const siblings = await this.client.tasks.getAllTasks(params);\n      return siblings\n        .filter((t: any) => t.taskId !== task.taskId)\n        .map((t: any) => this.createNavigableTask(t));\n    };\n\n    navigableTask.getSubtasks = async () => {\n      // Assuming subtasks have a parent field\n      const subtasks = await this.client.tasks.getAllTasks({\n        projectId: task.project.projectId\n        // Would add parentId filter in real implementation\n      });\n      return subtasks\n        .filter((t: any) => t.parent?.taskId === task.taskId)\n        .map((t: any) => this.createNavigableTask(t));\n    };\n\n    navigableTask.getParent = async () => {\n      if (!task.parent) return null;\n      const parentTask = await this.client.tasks.get(task.parent.taskId);\n      return this.createNavigableTask(parentTask);\n    };\n\n    // Time tracking\n    navigableTask.getTimeEntries = async () => {\n      const entries = await this.client.timeTracking.getAllTimeEntries({\n        taskId: task.taskId\n      });\n      return entries.map(entry => this.createNavigableTimeEntry(entry));\n    };\n\n    navigableTask.getTotalTimeSpent = async () => {\n      const entries = await navigableTask.getTimeEntries();\n      return entries.reduce((total, entry) => total + entry.minutes, 0);\n    };\n\n    // Utility methods\n    navigableTask.isOverdue = () => {\n      if (!task.dueDate) return false;\n      const dueDate = new Date(task.dueDate);\n      const now = new Date();\n      return dueDate < now && task.status.label !== 'Completed';\n    };\n\n    navigableTask.isHighPriority = () => {\n      return task.priority ? task.priority.value > 3 : false;\n    };\n\n    navigableTask.getProgressPercentage = () => {\n      return task.progress || 0;\n    };\n\n    return navigableTask;\n  }\n\n  createNavigableProject(project: Project): NavigableProject {\n    const navigableProject = project as NavigableProject;\n    navigableProject._client = this.client;\n\n    // Task navigation\n    navigableProject.getTasks = async (params = {}) => {\n      const tasks = await this.client.tasks.getAllTasks({\n        ...params,\n        projectId: project.projectId\n      });\n      return tasks.map(task => this.createNavigableTask(task));\n    };\n\n    navigableProject.getOverdueTasks = async () => {\n      const tasks = await navigableProject.getTasks();\n      return tasks.filter(task => task.isOverdue());\n    };\n\n    navigableProject.getTasksByPhase = async (phaseId: number) => {\n      const tasks = await this.client.tasks.getAllTasks({\n        projectId: project.projectId,\n        phaseId\n      });\n      return tasks.map(task => this.createNavigableTask(task));\n    };\n\n    navigableProject.getTasksByAssignee = async (userId: number) => {\n      const tasks = await this.client.tasks.getAllTasks({\n        projectId: project.projectId,\n        assigneeId: userId\n      });\n      return tasks.map(task => this.createNavigableTask(task));\n    };\n\n    // Phase navigation\n    navigableProject.getPhases = async () => {\n      const phases = await this.client.phases.getAllPhases({\n        projectId: project.projectId\n      });\n      return phases.map(phase => this.createNavigablePhase(phase));\n    };\n\n    navigableProject.getActivePhases = async () => {\n      const phases = await navigableProject.getPhases();\n      return phases.filter(phase => phase.status !== 'Completed');\n    };\n\n    // Team navigation\n    navigableProject.getTeamMembers = async () => {\n      if (!project.teamMembers) return [];\n      const users = await Promise.all(\n        project.teamMembers.map(member => this.client.users.getUser(member.userId))\n      );\n      return users.map((user: any) => this.createNavigableUser(user));\n    };\n\n    navigableProject.getOwner = async () => {\n      const user = await this.client.users.getUser(project.owner.userId);\n      return this.createNavigableUser(user);\n    };\n\n    // Time tracking\n    navigableProject.getTimeEntries = async (params = {}) => {\n      const entries = await this.client.timeTracking.getAllTimeEntries({\n        ...params,\n        projectId: project.projectId\n      });\n      return entries.map(entry => this.createNavigableTimeEntry(entry));\n    };\n\n    navigableProject.getTotalTimeSpent = async () => {\n      const entries = await navigableProject.getTimeEntries();\n      return entries.reduce((total, entry) => total + entry.minutes, 0);\n    };\n\n    // Analytics\n    navigableProject.getCompletionPercentage = async () => {\n      const tasks = await navigableProject.getTasks();\n      if (tasks.length === 0) return 0;\n      \n      const completedTasks = tasks.filter(task => task.status.label === 'Completed');\n      return Math.round((completedTasks.length / tasks.length) * 100);\n    };\n\n    navigableProject.getProjectHealth = async (): Promise<ProjectHealth> => {\n      const tasks = await navigableProject.getTasks();\n      const overdueTasks = tasks.filter(task => task.isOverdue());\n      const highPriorityTasks = tasks.filter(task => task.isHighPriority());\n      const completedTasks = tasks.filter(task => task.status.label === 'Completed');\n\n      const overallScore = Math.max(0, 100 - (overdueTasks.length * 10) - (highPriorityTasks.length * 5));\n\n      return {\n        overallScore,\n        tasksOnTrack: tasks.length - overdueTasks.length - highPriorityTasks.length,\n        tasksAtRisk: highPriorityTasks.length,\n        tasksOverdue: overdueTasks.length,\n        teamUtilization: 75, // Would calculate based on time entries\n        risks: overdueTasks.length > 0 ? ['Overdue tasks detected'] : [],\n        recommendations: overallScore < 70 ? ['Review task priorities and deadlines'] : []\n      };\n    };\n\n    return navigableProject;\n  }\n\n  createNavigableUser(user: User): NavigableUser {\n    const navigableUser = user as NavigableUser;\n    navigableUser._client = this.client;\n\n    // Task navigation\n    navigableUser.getAssignedTasks = async (params = {}) => {\n      const tasks = await this.client.tasks.getAllTasks({\n        ...params,\n        assigneeId: user.userId\n      });\n      return tasks.map(task => this.createNavigableTask(task));\n    };\n\n    navigableUser.getFollowedTasks = async () => {\n      // Would need to implement a way to find tasks where user is a follower\n      // This is a simplified implementation\n      const allTasks = await this.client.tasks.getAllTasks();\n      const followedTasks = allTasks.filter(task => \n        task.followers?.some(follower => follower.userId === user.userId)\n      );\n      return followedTasks.map(task => this.createNavigableTask(task));\n    };\n\n    navigableUser.getOverdueTasks = async () => {\n      const tasks = await navigableUser.getAssignedTasks();\n      return tasks.filter(task => task.isOverdue());\n    };\n\n    // Project navigation\n    navigableUser.getProjects = async () => {\n      // Find projects where user is a team member or owner\n      const allProjects = await this.client.projects.getAllProjects();\n      const userProjects = allProjects.filter((project: any) => \n        project.owner.userId === user.userId ||\n        project.teamMembers?.some((member: any) => member.userId === user.userId)\n      );\n      return userProjects.map((project: any) => this.createNavigableProject(project));\n    };\n\n    navigableUser.getOwnedProjects = async () => {\n      const projects = await this.client.projects.getAllProjects({\n        ownerId: user.userId\n      });\n      return projects.map((project: any) => this.createNavigableProject(project));\n    };\n\n    // Time tracking\n    navigableUser.getTimeEntries = async (params = {}) => {\n      const entries = await this.client.timeTracking.getAllTimeEntries({\n        ...params,\n        userId: user.userId\n      });\n      return entries.map(entry => this.createNavigableTimeEntry(entry));\n    };\n\n    navigableUser.getTotalHoursThisWeek = async () => {\n      const startOfWeek = new Date();\n      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      \n      const entries = await navigableUser.getTimeEntries({\n        dateFrom: startOfWeek.toISOString().split('T')[0],\n        dateTo: new Date().toISOString().split('T')[0]\n      });\n      \n      return Math.round(entries.reduce((total, entry) => total + entry.minutes, 0) / 60);\n    };\n\n    navigableUser.getTotalHoursThisMonth = async () => {\n      const startOfMonth = new Date();\n      startOfMonth.setDate(1);\n      startOfMonth.setHours(0, 0, 0, 0);\n      \n      const entries = await navigableUser.getTimeEntries({\n        dateFrom: startOfMonth.toISOString().split('T')[0],\n        dateTo: new Date().toISOString().split('T')[0]\n      });\n      \n      return Math.round(entries.reduce((total, entry) => total + entry.minutes, 0) / 60);\n    };\n\n    // Workload analysis\n    navigableUser.getWorkloadAnalysis = async (dateFrom: string, dateTo: string): Promise<WorkloadAnalysis> => {\n      const entries = await navigableUser.getTimeEntries({ dateFrom, dateTo });\n      const totalMinutes = entries.reduce((total, entry) => total + entry.minutes, 0);\n      const totalHours = Math.round(totalMinutes / 60);\n      \n      // Calculate date range\n      const start = new Date(dateFrom);\n      const end = new Date(dateTo);\n      const daysDiff = Math.ceil((end.getTime() - start.getTime()) / (1000 * 3600 * 24));\n      \n      return {\n        totalHours,\n        averageHoursPerDay: Math.round((totalHours / daysDiff) * 10) / 10,\n        peakDays: [], // Would calculate peak days\n        projectBreakdown: [], // Would calculate project breakdown\n        utilizationScore: Math.min(100, (totalHours / (daysDiff * 8)) * 100), // Assuming 8-hour days\n        recommendations: totalHours < daysDiff * 4 ? ['Consider increasing workload'] : []\n      };\n    };\n\n    return navigableUser;\n  }\n\n  createNavigablePhase(phase: Phase): NavigablePhase {\n    const navigablePhase = phase as NavigablePhase;\n    navigablePhase._client = this.client;\n\n    // Implementation would be similar to above patterns\n    // Shortened for brevity, but would include all navigation methods\n\n    return navigablePhase;\n  }\n\n  createNavigableTimeEntry(entry: TimeEntry): NavigableTimeEntry {\n    const navigableEntry = entry as NavigableTimeEntry;\n    navigableEntry._client = this.client;\n\n    // Implementation would include navigation to related entities\n    // Shortened for brevity\n\n    return navigableEntry;\n  }\n}","// Advanced query capabilities for the Rocketlane SDK\n\nexport type SortOrder = 'asc' | 'desc' | 'ASC' | 'DESC';\nexport type ComparisonOperator = '=' | '!=' | '<>' | '>' | '<' | '>=' | '<=' | 'LIKE' | 'IN' | 'NOT IN' | 'CONTAINS' | 'NOT CONTAINS' | 'BETWEEN' | 'NOT BETWEEN';\n\nexport interface QueryCondition {\n  field: string;\n  operator: ComparisonOperator;\n  value: any;\n  value2?: any; // For BETWEEN operations\n}\n\nexport interface QueryOptions {\n  limit?: number;\n  offset?: number;\n  orderBy?: Array<{ field: string; direction: SortOrder }>;\n  groupBy?: string[];\n  select?: Record<string, any> | string[];\n}\n\nexport interface SQLQueryResult<T> {\n  data: T[];\n  query: string;\n  params: Record<string, any>;\n  executedAt: Date;\n  count: number;\n}\n\nexport class QueryBuilder<T = any> {\n  private conditions: QueryCondition[] = [];\n  private options: QueryOptions = {};\n  private tableName: string;\n\n  constructor(tableName: string) {\n    this.tableName = tableName;\n  }\n\n  // WHERE clauses\n  where(field: string, operator: ComparisonOperator, value: any, value2?: any): this {\n    this.conditions.push({ field, operator, value, value2 });\n    return this;\n  }\n\n  whereEquals(field: string, value: any): this {\n    return this.where(field, '=', value);\n  }\n\n  whereNotEquals(field: string, value: any): this {\n    return this.where(field, '!=', value);\n  }\n\n  whereGreaterThan(field: string, value: any): this {\n    return this.where(field, '>', value);\n  }\n\n  whereLessThan(field: string, value: any): this {\n    return this.where(field, '<', value);\n  }\n\n  whereBetween(field: string, value1: any, value2: any): this {\n    return this.where(field, 'BETWEEN', value1, value2);\n  }\n\n  whereIn(field: string, values: any[]): this {\n    return this.where(field, 'IN', values);\n  }\n\n  whereContains(field: string, value: any): this {\n    return this.where(field, 'CONTAINS', value);\n  }\n\n  whereNotContains(field: string, value: any): this {\n    return this.where(field, 'NOT CONTAINS', value);\n  }\n\n  whereNotIn(field: string, values: any[]): this {\n    return this.where(field, 'NOT IN', values);\n  }\n\n  whereLike(field: string, value: string): this {\n    return this.where(field, 'LIKE', value);\n  }\n\n  // SELECT (field selection)\n  select(fields: Record<string, any> | string[]): this {\n    this.options.select = fields;\n    return this;\n  }\n\n  // ORDER BY\n  orderBy(field: string, direction: SortOrder = 'asc'): this {\n    if (!this.options.orderBy) this.options.orderBy = [];\n    this.options.orderBy.push({ field, direction: direction.toLowerCase() as SortOrder });\n    return this;\n  }\n\n  // GROUP BY\n  groupBy(...fields: string[]): this {\n    this.options.groupBy = fields;\n    return this;\n  }\n\n  // LIMIT\n  limit(count: number): this {\n    this.options.limit = count;\n    return this;\n  }\n\n  // OFFSET\n  offset(count: number): this {\n    this.options.offset = count;\n    return this;\n  }\n\n  // Execute the query (placeholder - would be implemented by resource classes)\n  async execute(): Promise<SQLQueryResult<T>> {\n    throw new Error('execute() method should be implemented by the resource class');\n  }\n\n  // Build the final query parameters\n  build(): {\n    params: Record<string, any>;\n    select?: Record<string, any> | string[];\n    sql?: string;\n  } {\n    const params: Record<string, any> = {};\n    \n    // Convert conditions to API parameters\n    this.conditions.forEach((condition, index) => {\n      const paramKey = this.getParamKey(condition.field, condition.operator);\n      \n      switch (condition.operator.toUpperCase()) {\n        case '=':\n          params[condition.field] = condition.value;\n          break;\n        case '!=':\n        case '<>':\n          params[`${condition.field}_ne`] = condition.value;\n          break;\n        case '>':\n          params[`${condition.field}_gt`] = condition.value;\n          break;\n        case '<':\n          params[`${condition.field}_lt`] = condition.value;\n          break;\n        case '>=':\n          params[`${condition.field}_gte`] = condition.value;\n          break;\n        case '<=':\n          params[`${condition.field}_lte`] = condition.value;\n          break;\n        case 'LIKE':\n          params[`${condition.field}_like`] = condition.value;\n          break;\n        case 'IN':\n          params[`${condition.field}_in`] = condition.value;\n          break;\n        case 'NOT IN':\n          params[`${condition.field}_nin`] = condition.value;\n          break;\n        case 'CONTAINS':\n          params[`${condition.field}_contains`] = condition.value;\n          break;\n        case 'BETWEEN':\n          params[`${condition.field}_gte`] = condition.value;\n          params[`${condition.field}_lte`] = condition.value2;\n          break;\n        case 'NOT BETWEEN':\n          params[`${condition.field}_lt`] = condition.value;\n          params[`${condition.field}_gt`] = condition.value2;\n          break;\n      }\n    });\n\n    // Add ordering\n    if (this.options.orderBy && this.options.orderBy.length > 0) {\n      const orderField = this.options.orderBy[0];\n      if (orderField) {\n        params.sortBy = orderField.field;\n        params.sortOrder = orderField.direction;\n      }\n    }\n\n    // Add pagination\n    if (this.options.limit) params.pageSize = this.options.limit;\n    if (this.options.offset) params.offset = this.options.offset;\n\n    return {\n      params,\n      ...(this.options.select && { select: this.options.select }),\n      ...(this.toSQL() && { sql: this.toSQL() })\n    };\n  }\n\n  // Generate SQL representation for debugging/logging\n  private toSQL(): string {\n    let sql = `SELECT ${this.getSelectClause()} FROM ${this.tableName}`;\n    \n    if (this.conditions.length > 0) {\n      const whereClause = this.conditions.map(c => this.conditionToSQL(c)).join(' AND ');\n      sql += ` WHERE ${whereClause}`;\n    }\n\n    if (this.options.groupBy && this.options.groupBy.length > 0) {\n      sql += ` GROUP BY ${this.options.groupBy.join(', ')}`;\n    }\n\n    if (this.options.orderBy && this.options.orderBy.length > 0) {\n      const orderClause = this.options.orderBy.map(o => `${o.field} ${o.direction.toUpperCase()}`).join(', ');\n      sql += ` ORDER BY ${orderClause}`;\n    }\n\n    if (this.options.limit) {\n      sql += ` LIMIT ${this.options.limit}`;\n    }\n\n    if (this.options.offset) {\n      sql += ` OFFSET ${this.options.offset}`;\n    }\n\n    return sql;\n  }\n\n  private getSelectClause(): string {\n    if (!this.options.select) return '*';\n    if (Array.isArray(this.options.select)) {\n      return this.options.select.join(', ');\n    }\n    // For object-style selection, return the keys\n    return Object.keys(this.options.select).join(', ');\n  }\n\n  private conditionToSQL(condition: QueryCondition): string {\n    const { field, operator, value, value2 } = condition;\n    \n    switch (operator.toUpperCase()) {\n      case 'BETWEEN':\n        return `${field} BETWEEN ${this.formatValue(value)} AND ${this.formatValue(value2)}`;\n      case 'NOT BETWEEN':\n        return `${field} NOT BETWEEN ${this.formatValue(value)} AND ${this.formatValue(value2)}`;\n      case 'IN':\n        return `${field} IN (${Array.isArray(value) ? value.map(v => this.formatValue(v)).join(', ') : this.formatValue(value)})`;\n      case 'NOT IN':\n        return `${field} NOT IN (${Array.isArray(value) ? value.map(v => this.formatValue(v)).join(', ') : this.formatValue(value)})`;\n      case 'CONTAINS':\n        return `${field} CONTAINS ${this.formatValue(value)}`;\n      case 'NOT CONTAINS':\n        return `${field} NOT CONTAINS ${this.formatValue(value)}`;\n      default:\n        return `${field} ${operator} ${this.formatValue(value)}`;\n    }\n  }\n\n  private formatValue(value: any): string {\n    if (typeof value === 'string') return `'${value}'`;\n    if (value instanceof Date) return `'${value.toISOString()}'`;\n    return String(value);\n  }\n\n  private getParamKey(field: string, operator: string): string {\n    return `${field}_${operator.toLowerCase().replace(/\\s+/g, '_')}`;\n  }\n}\n\n// SQL Template Literal Helper\nexport function sql<T = any>(strings: TemplateStringsArray, ...values: any[]): {\n  query: string;\n  params: any[];\n  parse: () => { tableName: string; conditions: any; options: any };\n} {\n  let query = '';\n  const params: any[] = [];\n  \n  for (let i = 0; i < strings.length; i++) {\n    query += strings[i];\n    if (i < values.length) {\n      query += `$${params.length + 1}`;\n      params.push(values[i]);\n    }\n  }\n  \n  return {\n    query: query.trim(),\n    params,\n    parse: () => parseSQLQuery(query, params)\n  };\n}\n\n// Simple SQL parser for extracting table name and basic conditions\nfunction parseSQLQuery(query: string, params: any[]): { tableName: string; conditions: any; options: any } {\n  const upperQuery = query.toUpperCase();\n  \n  // Extract table name\n  const fromMatch = upperQuery.match(/FROM\\s+(\\w+)/);\n  const tableName = fromMatch?.[1]?.toLowerCase() || 'unknown';\n  \n  // Extract WHERE conditions (basic implementation)\n  const whereMatch = upperQuery.match(/WHERE\\s+(.+?)(?:\\s+ORDER\\s+BY|\\s+GROUP\\s+BY|\\s+LIMIT|$)/);\n  const conditions = whereMatch ? whereMatch[1] : '';\n  \n  // Extract ORDER BY\n  const orderMatch = upperQuery.match(/ORDER\\s+BY\\s+(.+?)(?:\\s+LIMIT|$)/);\n  const orderBy = orderMatch ? orderMatch[1] : '';\n  \n  // Extract LIMIT\n  const limitMatch = upperQuery.match(/LIMIT\\s+(\\d+)/);\n  const limit = limitMatch?.[1] ? parseInt(limitMatch[1]) : undefined;\n  \n  return {\n    tableName,\n    conditions: { raw: conditions, params },\n    options: { orderBy, limit }\n  };\n}\n\n// GraphQL-style field selection helpers\nexport interface FieldSelection {\n  [key: string]: boolean | FieldSelection;\n}\n\nexport function processFieldSelection<T>(data: T[], selection: FieldSelection): Partial<T>[] {\n  return data.map(item => selectFields(item, selection));\n}\n\nfunction selectFields<T>(item: T, selection: FieldSelection): Partial<T> {\n  const result: Partial<T> = {};\n  \n  for (const [key, value] of Object.entries(selection)) {\n    if (key in (item as any)) {\n      if (value === true) {\n        // Include the field\n        (result as any)[key] = (item as any)[key];\n      } else if (typeof value === 'object' && (item as any)[key]) {\n        // Nested selection\n        if (Array.isArray((item as any)[key])) {\n          (result as any)[key] = (item as any)[key].map((subItem: any) => selectFields(subItem, value));\n        } else {\n          (result as any)[key] = selectFields((item as any)[key], value);\n        }\n      }\n    }\n  }\n  \n  return result;\n}","import { HttpClient } from './http-client';\nimport { BasePaginatedResponse, RocketlanePagination, PaginationOptions } from '../types/common';\nimport { QueryBuilder, sql, SQLQueryResult, FieldSelection, processFieldSelection } from './query-builder';\n\n// Extend paginated responses with helper methods\nexport interface PaginatedResponseWithHelpers<T, P extends PaginationOptions> extends BasePaginatedResponse<T> {\n  getNextPage(): Promise<PaginatedResponseWithHelpers<T, P> | null>;\n  getAllRemaining(): Promise<T[]>;\n  iterateRemainingPages(): AsyncGenerator<PaginatedResponseWithHelpers<T, P>, void, unknown>;\n  iterateRemainingItems(): AsyncGenerator<T, void, unknown>;\n}\n\nexport abstract class BaseResource {\n  constructor(protected httpClient: HttpClient) {}\n\n  /**\n   * Enhance a paginated response with helper methods\n   */\n  protected enhanceResponse<T, P extends PaginationOptions>(\n    response: BasePaginatedResponse<T>,\n    originalParams: P,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>\n  ): PaginatedResponseWithHelpers<T, P> {\n    const enhancedResponse = response as PaginatedResponseWithHelpers<T, P>;\n\n    enhancedResponse.getNextPage = async () => {\n      if (!response.pagination.hasMore || !response.pagination.nextPageToken) {\n        return null;\n      }\n      const nextParams = { ...originalParams, pageToken: response.pagination.nextPageToken } as P;\n      const nextResponse = await listMethod(nextParams);\n      return this.enhanceResponse(nextResponse, originalParams, listMethod);\n    };\n\n    enhancedResponse.getAllRemaining = async () => {\n      const allItems: T[] = [...response.data];\n      let currentResponse = enhancedResponse;\n      \n      while (currentResponse.pagination.hasMore && currentResponse.pagination.nextPageToken) {\n        const nextResponse = await currentResponse.getNextPage();\n        if (!nextResponse) break;\n        allItems.push(...nextResponse.data);\n        currentResponse = nextResponse;\n      }\n      \n      return allItems;\n    };\n\n    enhancedResponse.iterateRemainingPages = async function* () {\n      let currentResponse: PaginatedResponseWithHelpers<T, P> | null = enhancedResponse;\n      \n      while (currentResponse) {\n        yield currentResponse;\n        if (!currentResponse.pagination.hasMore || !currentResponse.pagination.nextPageToken) break;\n        currentResponse = await currentResponse.getNextPage();\n      }\n    };\n\n    enhancedResponse.iterateRemainingItems = async function* () {\n      for await (const page of enhancedResponse.iterateRemainingPages()) {\n        for (const item of page.data) {\n          yield item;\n        }\n      }\n    };\n\n    return enhancedResponse;\n  }\n\n  /**\n   * Get the next page from a paginated response\n   */\n  protected async getNextPageInternal<T, P extends PaginationOptions>(\n    response: BasePaginatedResponse<T>,\n    originalParams: P,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>\n  ): Promise<BasePaginatedResponse<T> | null> {\n    if (!response.pagination.hasMore || !response.pagination.nextPageToken) {\n      return null;\n    }\n\n    const nextParams = {\n      ...originalParams,\n      pageToken: response.pagination.nextPageToken,\n    } as P;\n\n    return listMethod(nextParams);\n  }\n\n  /**\n   * Get all pages from a paginated endpoint\n   */\n  protected async getAllPages<T, P extends PaginationOptions>(\n    params: P,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>,\n    maxPages = 50\n  ): Promise<T[]> {\n    const allItems: T[] = [];\n    let currentParams = { ...params };\n    let pageCount = 0;\n\n    do {\n      if (pageCount >= maxPages) {\n        console.warn(`Reached maximum page limit (${maxPages}). Use manual pagination for very large datasets.`);\n        break;\n      }\n\n      const response = await listMethod(currentParams as P);\n      allItems.push(...response.data);\n\n      if (!response.pagination.hasMore || !response.pagination.nextPageToken) {\n        break;\n      }\n\n      currentParams = {\n        ...currentParams,\n        pageToken: response.pagination.nextPageToken,\n      };\n      pageCount++;\n    } while (true);\n\n    return allItems;\n  }\n\n  /**\n   * Create an async iterator for paginated results\n   */\n  protected async* iteratePages<T, P extends PaginationOptions>(\n    params: P,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>\n  ): AsyncGenerator<BasePaginatedResponse<T>, void, unknown> {\n    let currentParams = { ...params };\n\n    do {\n      const response = await listMethod(currentParams as P);\n      yield response;\n\n      if (!response.pagination.hasMore || !response.pagination.nextPageToken) {\n        break;\n      }\n\n      currentParams = {\n        ...currentParams,\n        pageToken: response.pagination.nextPageToken,\n      };\n    } while (true);\n  }\n\n  /**\n   * Create an async iterator for individual items across all pages\n   */\n  protected async* iterateItems<T, P extends PaginationOptions>(\n    params: P,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>\n  ): AsyncGenerator<T, void, unknown> {\n    for await (const page of this.iteratePages(params, listMethod)) {\n      for (const item of page.data) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Create a query builder for advanced querying\n   */\n  protected createQueryBuilder<T>(tableName: string): QueryBuilder<T> {\n    return new QueryBuilder<T>(tableName);\n  }\n\n  /**\n   * Execute a query built with QueryBuilder\n   */\n  protected async executeQuery<T, P extends PaginationOptions>(\n    queryBuilder: QueryBuilder<T>,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>\n  ): Promise<SQLQueryResult<T>> {\n    const { params, select, sql: sqlQuery } = queryBuilder.build();\n    const startTime = new Date();\n    \n    const response = await listMethod(params as P);\n    let data = response.data;\n\n    // Apply field selection if specified\n    if (select) {\n      if (Array.isArray(select)) {\n        // Simple field array selection\n        data = data.map(item => {\n          const filtered: Partial<T> = {};\n          select.forEach(field => {\n            if (field in (item as any)) {\n              (filtered as any)[field] = (item as any)[field];\n            }\n          });\n          return filtered as T;\n        });\n      } else {\n        // GraphQL-style nested selection\n        data = processFieldSelection(data, select as FieldSelection) as T[];\n      }\n    }\n\n    return {\n      data,\n      query: sqlQuery || 'Generated from QueryBuilder',\n      params,\n      executedAt: startTime,\n      count: data.length\n    };\n  }\n\n  /**\n   * Execute raw SQL-like queries using template literals\n   */\n  protected async executeSQL<T, P extends PaginationOptions>(\n    sqlTemplate: ReturnType<typeof sql<T>>,\n    listMethod: (params: P) => Promise<BasePaginatedResponse<T>>\n  ): Promise<SQLQueryResult<T>> {\n    const { query, params: sqlParams, parse } = sqlTemplate;\n    const parsed = parse();\n    \n    // Convert SQL-like query to API parameters (simplified implementation)\n    const apiParams = this.convertSQLToAPIParams(parsed, sqlParams);\n    const startTime = new Date();\n    \n    const response = await listMethod(apiParams as P);\n    \n    return {\n      data: response.data,\n      query,\n      params: apiParams,\n      executedAt: startTime,\n      count: response.data.length\n    };\n  }\n\n  /**\n   * Apply GraphQL-style field selection to a list response\n   */\n  protected applyFieldSelection<T>(\n    response: BasePaginatedResponse<T>,\n    selection: FieldSelection\n  ): BasePaginatedResponse<Partial<T>> {\n    const filteredData = processFieldSelection(response.data, selection);\n    return {\n      ...response,\n      data: filteredData\n    };\n  }\n\n  /**\n   * Convert parsed SQL conditions to API parameters\n   */\n  private convertSQLToAPIParams(parsed: any, sqlParams: any[]): Record<string, any> {\n    // This is a simplified implementation\n    // In a real-world scenario, you'd have a more sophisticated SQL parser\n    const params: Record<string, any> = {};\n    \n    // Map SQL parameters to their values\n    let paramIndex = 0;\n    const conditions = parsed.conditions.raw || '';\n    \n    // Basic parameter mapping (would need more sophisticated parsing for production)\n    if (conditions.includes('projectId')) {\n      params.projectId = sqlParams[paramIndex++];\n    }\n    if (conditions.includes('status')) {\n      params.status = sqlParams[paramIndex++];\n    }\n    if (conditions.includes('assignees')) {\n      params.assigneeId = sqlParams[paramIndex++];\n    }\n    if (conditions.includes('dueDate') && conditions.includes('BETWEEN')) {\n      params.dueDateFrom = sqlParams[paramIndex++];\n      params.dueDateTo = sqlParams[paramIndex++];\n    }\n    \n    // Handle ORDER BY\n    if (parsed.options.orderBy) {\n      const orderParts = parsed.options.orderBy.split(' ');\n      params.sortBy = orderParts[0];\n      if (orderParts[1]) {\n        params.sortOrder = orderParts[1].toLowerCase();\n      }\n    }\n    \n    // Handle LIMIT\n    if (parsed.options.limit) {\n      params.pageSize = parsed.options.limit;\n    }\n    \n    return params;\n  }\n}","import { BaseResource, PaginatedResponseWithHelpers } from '../utils/base-resource';\nimport { QueryBuilder, sql, SQLQueryResult, FieldSelection } from '../utils/query-builder';\nimport { NavigableTask, NavigableObjectFactory } from '../utils/relationship-navigation';\nimport {\n  Task,\n  TasksListResponse,\n  CreateTaskRequest,\n  UpdateTaskRequest,\n  TasksQueryParams,\n  AddAssigneesRequest,\n  RemoveAssigneesRequest,\n  AddFollowersRequest,\n  RemoveFollowersRequest,\n  AddDependenciesRequest,\n  RemoveDependenciesRequest,\n  MoveTaskToPhaseRequest,\n  BulkUpdateTasksRequest,\n} from '../types/tasks';\n\nexport class TasksResource extends BaseResource {\n  private navFactory?: NavigableObjectFactory;\n\n  async list(params?: TasksQueryParams): Promise<TasksListResponse> {\n    return this.httpClient.get<TasksListResponse>('/api/1.0/tasks', params);\n  }\n\n  /**\n   * List tasks with enhanced pagination methods on the response\n   */\n  async listWithPagination(params?: TasksQueryParams): Promise<PaginatedResponseWithHelpers<Task, TasksQueryParams>> {\n    const response = await this.list(params);\n    return this.enhanceResponse(response, params || {}, this.list.bind(this));\n  }\n\n  async get(taskId: number): Promise<Task> {\n    return this.httpClient.get<Task>(`/api/1.0/tasks/${taskId}`);\n  }\n\n  async create(data: CreateTaskRequest): Promise<Task> {\n    return this.httpClient.post<Task>('/api/1.0/tasks', data);\n  }\n\n  async update(taskId: number, data: UpdateTaskRequest): Promise<Task> {\n    return this.httpClient.put<Task>(`/api/1.0/tasks/${taskId}`, data);\n  }\n\n  async deleteResource(taskId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/tasks/${taskId}`);\n  }\n\n  async addAssignees(taskId: number, data: AddAssigneesRequest): Promise<Task> {\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/assignees`, data);\n  }\n\n  async removeAssignees(taskId: number, data: RemoveAssigneesRequest): Promise<Task> {\n    return this.httpClient.delete<Task>(`/api/1.0/tasks/${taskId}/assignees`, data);\n  }\n\n  async addFollowers(taskId: number, data: AddFollowersRequest): Promise<Task> {\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/followers`, data);\n  }\n\n  async removeFollowers(taskId: number, data: RemoveFollowersRequest): Promise<Task> {\n    return this.httpClient.delete<Task>(`/api/1.0/tasks/${taskId}/followers`, data);\n  }\n\n  async addDependencies(taskId: number, data: AddDependenciesRequest): Promise<Task> {\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/dependencies`, data);\n  }\n\n  async removeDependencies(taskId: number, data: RemoveDependenciesRequest): Promise<Task> {\n    return this.httpClient.delete<Task>(`/api/1.0/tasks/${taskId}/dependencies`, data);\n  }\n\n  async moveToPhase(taskId: number, data: MoveTaskToPhaseRequest): Promise<Task> {\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/move`, data);\n  }\n\n  async duplicate(taskId: number, projectId?: number): Promise<Task> {\n    const params = projectId ? { projectId } : undefined;\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/duplicate`, undefined, params);\n  }\n\n  async archive(taskId: number): Promise<Task> {\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/archive`);\n  }\n\n  async unarchive(taskId: number): Promise<Task> {\n    return this.httpClient.post<Task>(`/api/1.0/tasks/${taskId}/unarchive`);\n  }\n\n  async bulkUpdate(data: BulkUpdateTasksRequest): Promise<Task[]> {\n    return this.httpClient.put<Task[]>('/api/1.0/tasks/bulk', data);\n  }\n\n  async bulkDelete(taskIds: number[]): Promise<void> {\n    return this.httpClient.delete<void>('/api/1.0/tasks/bulk', { taskIds });\n  }\n\n  async getByProject(projectId: number, params?: Omit<TasksQueryParams, 'projectId'>): Promise<TasksListResponse> {\n    return this.list({ ...params, projectId });\n  }\n\n  async getByPhase(phaseId: number, params?: Omit<TasksQueryParams, 'phaseId'>): Promise<TasksListResponse> {\n    return this.list({ ...params, phaseId });\n  }\n\n  async getByAssignee(assigneeId: number, params?: Omit<TasksQueryParams, 'assigneeId'>): Promise<TasksListResponse> {\n    return this.list({ ...params, assigneeId });\n  }\n\n  async search(query: string, params?: Omit<TasksQueryParams, 'search'>): Promise<TasksListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: TasksListResponse, originalParams?: TasksQueryParams): Promise<TasksListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllTasks(params?: TasksQueryParams): Promise<Task[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateTaskPages(params?: TasksQueryParams): AsyncGenerator<TasksListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateTasks(params?: TasksQueryParams): AsyncGenerator<Task, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n\n  // Advanced Query Capabilities\n\n  /**\n   * Create a query builder for advanced task querying\n   */\n  queryBuilder(): QueryBuilder<Task> {\n    return this.createQueryBuilder<Task>('tasks');\n  }\n\n  /**\n   * Execute a query built with QueryBuilder\n   */\n  async query(queryBuilder: QueryBuilder<Task>): Promise<SQLQueryResult<Task>> {\n    return this.executeQuery(queryBuilder, this.list.bind(this));\n  }\n\n  /**\n   * Execute SQL-like queries using template literals\n   */\n  async querySQL(sqlTemplate: ReturnType<typeof sql<Task>>): Promise<SQLQueryResult<Task>> {\n    return this.executeSQL(sqlTemplate, this.list.bind(this));\n  }\n\n  /**\n   * List tasks with GraphQL-style field selection\n   */\n  async listWithFields(params: TasksQueryParams, selection: FieldSelection): Promise<TasksListResponse> {\n    const response = await this.list(params);\n    return this.applyFieldSelection(response, selection) as TasksListResponse;\n  }\n\n  /**\n   * Advanced query methods with fluent interface\n   */\n\n  // Find tasks in a specific project\n  forProject(projectId: number): QueryBuilder<Task> {\n    const builder = this.queryBuilder().whereEquals('projectId', projectId);\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  private bindExecutorToBuilder(builder: QueryBuilder<Task>): void {\n    builder.execute = () => this.query(builder);\n    \n    // Bind all query methods to work on the existing builder\n    (builder as any).forProject = (projectId: number) => {\n      builder.whereEquals('projectId', projectId);\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).withStatus = (status: number | string) => {\n      builder.whereEquals('status', status);\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).assignedTo = (userId: number | number[]) => {\n      if (Array.isArray(userId)) {\n        builder.whereIn('assigneeId', userId);\n      } else {\n        builder.whereEquals('assigneeId', userId);\n      }\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).dueBetween = (startDate: string, endDate: string) => {\n      builder.whereBetween('dueDate', startDate, endDate);\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).nameContains = (text: string) => {\n      builder.whereContains('taskName', text);\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).overdue = () => {\n      const today = new Date().toISOString().split('T')[0];\n      builder.whereLessThan('dueDate', today).whereNotEquals('status', 'completed');\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).highPriority = () => {\n      builder.whereGreaterThan('priority', 3);\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n    \n    (builder as any).withEffortMoreThan = (minutes: number) => {\n      builder.whereGreaterThan('effortInMinutes', minutes);\n      this.bindExecutorToBuilder(builder);\n      return builder;\n    };\n  }\n\n  // Find tasks assigned to specific users  \n  assignedTo(userId: number | number[]): QueryBuilder<Task> {\n    let builder;\n    if (Array.isArray(userId)) {\n      builder = this.queryBuilder().whereIn('assigneeId', userId);\n    } else {\n      builder = this.queryBuilder().whereEquals('assigneeId', userId);\n    }\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Find tasks due within a date range\n  dueBetween(startDate: string, endDate: string): QueryBuilder<Task> {\n    const builder = this.queryBuilder().whereBetween('dueDate', startDate, endDate);\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Find tasks with specific status\n  withStatus(status: number | string): QueryBuilder<Task> {\n    const builder = this.queryBuilder().whereEquals('status', status);\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Find tasks containing text in name\n  nameContains(text: string): QueryBuilder<Task> {\n    const builder = this.queryBuilder().whereContains('taskName', text);\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Find overdue tasks\n  overdue(): QueryBuilder<Task> {\n    const today = new Date().toISOString().split('T')[0];\n    const builder = this.queryBuilder()\n      .whereLessThan('dueDate', today)\n      .whereNotEquals('status', 'completed'); // Assuming completed status\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Find high priority tasks\n  highPriority(): QueryBuilder<Task> {\n    const builder = this.queryBuilder().whereGreaterThan('priority', 3);\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Find tasks with substantial effort\n  withEffortMoreThan(minutes: number): QueryBuilder<Task> {\n    const builder = this.queryBuilder().whereGreaterThan('effortInMinutes', minutes);\n    this.bindExecutorToBuilder(builder);\n    return builder;\n  }\n\n  // Chainable query examples\n  async findCriticalTasks(projectId?: number): Promise<SQLQueryResult<Task>> {\n    let query = this.queryBuilder()\n      .whereGreaterThan('priority', 3)\n      .whereLessThan('dueDate', new Date().toISOString())\n      .whereNotEquals('status', 'completed')\n      .orderBy('dueDate', 'asc')\n      .limit(50);\n\n    if (projectId) {\n      query = query.whereEquals('projectId', projectId);\n    }\n\n    return this.query(query);\n  }\n\n  async findTeamWorkload(assigneeIds: number[], dateFrom: string, dateTo: string): Promise<SQLQueryResult<Task>> {\n    const query = this.queryBuilder()\n      .whereIn('assigneeId', assigneeIds)\n      .whereBetween('dueDate', dateFrom, dateTo)\n      .select(['taskName', 'assigneeId', 'effortInMinutes', 'status', 'dueDate'])\n      .orderBy('assigneeId', 'asc')\n      .orderBy('dueDate', 'asc');\n\n    return this.query(query);\n  }\n\n  // Relationship Navigation\n\n  /**\n   * Set the navigation factory (called by client)\n   */\n  setNavigationFactory(factory: NavigableObjectFactory): void {\n    this.navFactory = factory;\n  }\n\n  /**\n   * Get a navigable task with relationship methods\n   */\n  async getNavigable(taskId: number): Promise<NavigableTask> {\n    const task = await this.get(taskId);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return this.navFactory.createNavigableTask(task);\n  }\n\n  /**\n   * List tasks as navigable objects\n   */\n  async listNavigable(params?: TasksQueryParams): Promise<NavigableTask[]> {\n    const response = await this.list(params);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return response.data.map(task => this.navFactory!.createNavigableTask(task));\n  }\n\n  /**\n   * Get all tasks as navigable objects\n   */\n  async getAllNavigableTasks(params?: TasksQueryParams): Promise<NavigableTask[]> {\n    const tasks = await this.getAllTasks(params);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return tasks.map(task => this.navFactory!.createNavigableTask(task));\n  }\n}","import { BaseResource } from '../utils/base-resource';\nimport {\n  Field,\n  FieldsListResponse,\n  CreateFieldRequest,\n  UpdateFieldRequest,\n  FieldsQueryParams,\n  FieldOption,\n  CreateFieldOptionRequest,\n  UpdateFieldOptionRequest,\n  BulkUpdateFieldOptionsRequest,\n  EntityFieldValues,\n  UpdateEntityFieldsRequest,\n} from '../types/fields';\n\nexport class FieldsResource extends BaseResource {\n\n  // Field Management\n  async list(params?: FieldsQueryParams): Promise<FieldsListResponse> {\n    return this.httpClient.get<FieldsListResponse>('/api/1.0/fields', params);\n  }\n\n  async getField(fieldId: string): Promise<Field> {\n    return this.httpClient.get<Field>(`/api/1.0/fields/${fieldId}`);\n  }\n\n  async create(data: CreateFieldRequest): Promise<Field> {\n    return this.httpClient.post<Field>('/api/1.0/fields', data);\n  }\n\n  async update(fieldId: string, data: UpdateFieldRequest): Promise<Field> {\n    return this.httpClient.put<Field>(`/api/1.0/fields/${fieldId}`, data);\n  }\n\n  async deleteResource(fieldId: string): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/fields/${fieldId}`);\n  }\n\n  async activate(fieldId: string): Promise<Field> {\n    return this.httpClient.post<Field>(`/api/1.0/fields/${fieldId}/activate`);\n  }\n\n  async deactivate(fieldId: string): Promise<Field> {\n    return this.httpClient.post<Field>(`/api/1.0/fields/${fieldId}/deactivate`);\n  }\n\n  async reorder(fieldIds: string[]): Promise<Field[]> {\n    return this.httpClient.post<Field[]>('/api/1.0/fields/reorder', { fieldIds });\n  }\n\n  // Field Options Management\n  async getOptions(fieldId: string): Promise<FieldOption[]> {\n    return this.httpClient.get<FieldOption[]>(`/api/1.0/fields/${fieldId}/options`);\n  }\n\n  async createOption(fieldId: string, data: CreateFieldOptionRequest): Promise<FieldOption> {\n    return this.httpClient.post<FieldOption>(`/api/1.0/fields/${fieldId}/options`, data);\n  }\n\n  async updateOption(fieldId: string, optionId: string, data: UpdateFieldOptionRequest): Promise<FieldOption> {\n    return this.httpClient.put<FieldOption>(`/api/1.0/fields/${fieldId}/options/${optionId}`, data);\n  }\n\n  async deleteOption(fieldId: string, optionId: string): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/fields/${fieldId}/options/${optionId}`);\n  }\n\n  async bulkUpdateOptions(fieldId: string, data: BulkUpdateFieldOptionsRequest): Promise<FieldOption[]> {\n    return this.httpClient.put<FieldOption[]>(`/api/1.0/fields/${fieldId}/options/bulk`, data);\n  }\n\n  async reorderOptions(fieldId: string, optionIds: string[]): Promise<FieldOption[]> {\n    return this.httpClient.post<FieldOption[]>(`/api/1.0/fields/${fieldId}/options/reorder`, { optionIds });\n  }\n\n  // Entity Field Values\n  async getEntityFields(entityType: 'task' | 'project' | 'user' | 'time_entry', entityId: number): Promise<EntityFieldValues> {\n    return this.httpClient.get<EntityFieldValues>(`/api/1.0/${entityType}s/${entityId}/fields`);\n  }\n\n  async updateEntityFields(entityType: 'task' | 'project' | 'user' | 'time_entry', entityId: number, data: UpdateEntityFieldsRequest): Promise<EntityFieldValues> {\n    return this.httpClient.put<EntityFieldValues>(`/api/1.0/${entityType}s/${entityId}/fields`, data);\n  }\n\n  // Helper methods for filtering\n  async getByType(type: 'text' | 'textarea' | 'number' | 'date' | 'datetime' | 'boolean' | 'select' | 'multiselect' | 'user' | 'email' | 'url' | 'currency', params?: Omit<FieldsQueryParams, 'type'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, type });\n  }\n\n  async getByEntity(entity: 'task' | 'project' | 'user' | 'time_entry', params?: Omit<FieldsQueryParams, 'entity'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, entity });\n  }\n\n  async getActive(params?: Omit<FieldsQueryParams, 'active'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, active: true });\n  }\n\n  async getInactive(params?: Omit<FieldsQueryParams, 'active'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, active: false });\n  }\n\n  async getRequired(params?: Omit<FieldsQueryParams, 'required'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, required: true });\n  }\n\n  async getOptional(params?: Omit<FieldsQueryParams, 'required'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, required: false });\n  }\n\n  async search(query: string, params?: Omit<FieldsQueryParams, 'search'>): Promise<FieldsListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  // Specific entity field helpers\n  async getTaskFields(params?: Omit<FieldsQueryParams, 'entity'>): Promise<FieldsListResponse> {\n    return this.getByEntity('task', params);\n  }\n\n  async getProjectFields(params?: Omit<FieldsQueryParams, 'entity'>): Promise<FieldsListResponse> {\n    return this.getByEntity('project', params);\n  }\n\n  async getUserFields(params?: Omit<FieldsQueryParams, 'entity'>): Promise<FieldsListResponse> {\n    return this.getByEntity('user', params);\n  }\n\n  async getTimeEntryFields(params?: Omit<FieldsQueryParams, 'entity'>): Promise<FieldsListResponse> {\n    return this.getByEntity('time_entry', params);\n  }\n\n  // Field type helpers\n  async getSelectFields(params?: Omit<FieldsQueryParams, 'type'>): Promise<FieldsListResponse> {\n    return this.getByType('select', params);\n  }\n\n  async getMultiselectFields(params?: Omit<FieldsQueryParams, 'type'>): Promise<FieldsListResponse> {\n    return this.getByType('multiselect', params);\n  }\n\n  async getTextFields(params?: Omit<FieldsQueryParams, 'type'>): Promise<FieldsListResponse> {\n    return this.getByType('text', params);\n  }\n\n  async getDateFields(params?: Omit<FieldsQueryParams, 'type'>): Promise<FieldsListResponse> {\n    return this.getByType('date', params);\n  }\n\n  async getNumberFields(params?: Omit<FieldsQueryParams, 'type'>): Promise<FieldsListResponse> {\n    return this.getByType('number', params);\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: FieldsListResponse, originalParams?: FieldsQueryParams): Promise<FieldsListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllFields(params?: FieldsQueryParams): Promise<Field[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateFieldPages(params?: FieldsQueryParams): AsyncGenerator<FieldsListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateFields(params?: FieldsQueryParams): AsyncGenerator<Field, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { BaseResource } from '../utils/base-resource';\nimport { NavigableProject, NavigableObjectFactory } from '../utils/relationship-navigation';\nimport {\n  Project,\n  ProjectsListResponse,\n  CreateProjectRequest,\n  UpdateProjectRequest,\n  ProjectsQueryParams,\n  AddProjectMembersRequest,\n  RemoveProjectMembersRequest,\n  ImportTemplateRequest,\n  AssignPlaceholderRequest,\n  UnassignPlaceholderRequest,\n} from '../types/projects';\n\nexport class ProjectsResource extends BaseResource {\n  private navFactory?: NavigableObjectFactory;\n\n  async list(params?: ProjectsQueryParams): Promise<ProjectsListResponse> {\n    return this.httpClient.get<ProjectsListResponse>('/api/1.0/projects', params);\n  }\n\n  async get(projectId: number, includeFields?: string): Promise<Project> {\n    const params = includeFields ? { includeFields } : undefined;\n    return this.httpClient.get<Project>(`/api/1.0/projects/${projectId}`, params);\n  }\n\n  async create(data: CreateProjectRequest): Promise<Project> {\n    return this.httpClient.post<Project>('/api/1.0/projects', data);\n  }\n\n  async update(projectId: number, data: UpdateProjectRequest): Promise<Project> {\n    return this.httpClient.put<Project>(`/api/1.0/projects/${projectId}`, data);\n  }\n\n  async deleteResource(projectId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/projects/${projectId}`);\n  }\n\n  async archive(projectId: number): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/archive`);\n  }\n\n  async unarchive(projectId: number): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/unarchive`);\n  }\n\n  async addMembers(projectId: number, data: AddProjectMembersRequest): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/members`, data);\n  }\n\n  async removeMembers(projectId: number, data: RemoveProjectMembersRequest): Promise<Project> {\n    return this.httpClient.delete<Project>(`/api/1.0/projects/${projectId}/members`, data);\n  }\n\n  async importTemplate(projectId: number, data: ImportTemplateRequest): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/import-template`, data);\n  }\n\n  async assignPlaceholder(projectId: number, data: AssignPlaceholderRequest): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/placeholders/assign`, data);\n  }\n\n  async unassignPlaceholder(projectId: number, data: UnassignPlaceholderRequest): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/placeholders/unassign`, data);\n  }\n\n  async duplicate(projectId: number, newProjectName: string): Promise<Project> {\n    return this.httpClient.post<Project>(`/api/1.0/projects/${projectId}/duplicate`, {\n      projectName: newProjectName,\n    });\n  }\n\n  async getByCompany(companyId: number, params?: Omit<ProjectsQueryParams, 'companyId'>): Promise<ProjectsListResponse> {\n    return this.list({ ...params, companyId });\n  }\n\n  async getByOwner(ownerId: number, params?: Omit<ProjectsQueryParams, 'ownerId'>): Promise<ProjectsListResponse> {\n    return this.list({ ...params, ownerId });\n  }\n\n  async search(query: string, params?: Omit<ProjectsQueryParams, 'search'>): Promise<ProjectsListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: ProjectsListResponse, originalParams?: ProjectsQueryParams): Promise<ProjectsListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllProjects(params?: ProjectsQueryParams): Promise<Project[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateProjectPages(params?: ProjectsQueryParams): AsyncGenerator<ProjectsListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateProjects(params?: ProjectsQueryParams): AsyncGenerator<Project, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n\n  // Relationship Navigation\n\n  /**\n   * Set the navigation factory (called by client)\n   */\n  setNavigationFactory(factory: NavigableObjectFactory): void {\n    this.navFactory = factory;\n  }\n\n  /**\n   * Get a navigable project with relationship methods\n   */\n  async getNavigable(projectId: number): Promise<NavigableProject> {\n    const project = await this.get(projectId);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return this.navFactory.createNavigableProject(project);\n  }\n\n  /**\n   * List projects as navigable objects\n   */\n  async listNavigable(params?: ProjectsQueryParams): Promise<NavigableProject[]> {\n    const response = await this.list(params);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return response.data.map(project => this.navFactory!.createNavigableProject(project));\n  }\n\n  /**\n   * Get all projects as navigable objects\n   */\n  async getAllNavigableProjects(params?: ProjectsQueryParams): Promise<NavigableProject[]> {\n    const projects = await this.getAllProjects(params);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return projects.map(project => this.navFactory!.createNavigableProject(project));\n  }\n}","import { BaseResource } from '../utils/base-resource';\n\nexport interface ResourceAllocation {\n  allocationId: number;\n  projectId: number;\n  projectName: string;\n  userId: number;\n  userFirstName: string;\n  userLastName?: string;\n  allocatedMinutes: number;\n  startDate: string;\n  endDate: string;\n  createdAt: number;\n  updatedAt: number;\n}\n\nexport interface ResourceAllocationsListResponse {\n  data: ResourceAllocation[];\n  pagination: {\n    pageSize: number;\n    hasMore: boolean;\n    totalRecordCount: number;\n    nextPage?: string;\n    nextPageToken?: string;\n  };\n}\n\nexport interface ResourceAllocationsQueryParams {\n  pageSize?: number;\n  pageToken?: string;\n  projectId?: number;\n  userId?: number;\n  startDateFrom?: string;\n  startDateTo?: string;\n  endDateFrom?: string;\n  endDateTo?: string;\n  sortBy?: 'startDate' | 'endDate' | 'allocatedMinutes' | 'createdAt';\n  sortOrder?: 'asc' | 'desc';\n  [key: string]: unknown;\n}\n\nexport class ResourceAllocationsResource extends BaseResource {\n\n  async list(params?: ResourceAllocationsQueryParams): Promise<ResourceAllocationsListResponse> {\n    return this.httpClient.get<ResourceAllocationsListResponse>('/api/1.0/resource-allocations', params);\n  }\n\n  async getResourceAllocation(allocationId: number): Promise<ResourceAllocation> {\n    return this.httpClient.get<ResourceAllocation>(`/api/1.0/resource-allocations/${allocationId}`);\n  }\n\n  async getByProject(projectId: number, params?: Omit<ResourceAllocationsQueryParams, 'projectId'>): Promise<ResourceAllocationsListResponse> {\n    return this.list({ ...params, projectId });\n  }\n\n  async getByUser(userId: number, params?: Omit<ResourceAllocationsQueryParams, 'userId'>): Promise<ResourceAllocationsListResponse> {\n    return this.list({ ...params, userId });\n  }\n\n  async getByDateRange(startDateFrom: string, startDateTo: string, params?: Omit<ResourceAllocationsQueryParams, 'startDateFrom' | 'startDateTo'>): Promise<ResourceAllocationsListResponse> {\n    return this.list({ ...params, startDateFrom, startDateTo });\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: ResourceAllocationsListResponse, originalParams?: ResourceAllocationsQueryParams): Promise<ResourceAllocationsListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllResourceAllocations(params?: ResourceAllocationsQueryParams): Promise<ResourceAllocation[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateResourceAllocationPages(params?: ResourceAllocationsQueryParams): AsyncGenerator<ResourceAllocationsListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateResourceAllocations(params?: ResourceAllocationsQueryParams): AsyncGenerator<ResourceAllocation, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { BaseResource } from '../utils/base-resource';\nimport {\n  Phase,\n  PhasesListResponse,\n  CreatePhaseRequest,\n  UpdatePhaseRequest,\n  PhasesQueryParams,\n  ReorderPhasesRequest,\n  BulkUpdatePhasesRequest,\n  DuplicatePhaseRequest,\n} from '../types/phases';\n\nexport class PhasesResource extends BaseResource {\n\n  async list(params?: PhasesQueryParams): Promise<PhasesListResponse> {\n    return this.httpClient.get<PhasesListResponse>('/api/1.0/phases', params);\n  }\n\n  async getPhase(phaseId: number): Promise<Phase> {\n    return this.httpClient.get<Phase>(`/api/1.0/phases/${phaseId}`);\n  }\n\n  async create(data: CreatePhaseRequest): Promise<Phase> {\n    return this.httpClient.post<Phase>('/api/1.0/phases', data);\n  }\n\n  async update(phaseId: number, data: UpdatePhaseRequest): Promise<Phase> {\n    return this.httpClient.put<Phase>(`/api/1.0/phases/${phaseId}`, data);\n  }\n\n  async deleteResource(phaseId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/phases/${phaseId}`);\n  }\n\n  async archive(phaseId: number): Promise<Phase> {\n    return this.httpClient.post<Phase>(`/api/1.0/phases/${phaseId}/archive`);\n  }\n\n  async unarchive(phaseId: number): Promise<Phase> {\n    return this.httpClient.post<Phase>(`/api/1.0/phases/${phaseId}/unarchive`);\n  }\n\n  async duplicate(phaseId: number, data: DuplicatePhaseRequest): Promise<Phase> {\n    return this.httpClient.post<Phase>(`/api/1.0/phases/${phaseId}/duplicate`, data);\n  }\n\n  async reorder(data: ReorderPhasesRequest): Promise<Phase[]> {\n    return this.httpClient.post<Phase[]>('/api/1.0/phases/reorder', data);\n  }\n\n  async bulkUpdate(data: BulkUpdatePhasesRequest): Promise<Phase[]> {\n    return this.httpClient.put<Phase[]>('/api/1.0/phases/bulk', data);\n  }\n\n  async bulkDelete(phaseIds: number[]): Promise<void> {\n    return this.httpClient.delete<void>('/api/1.0/phases/bulk', { phaseIds });\n  }\n\n  // Helper methods for filtering\n  async getByProject(projectId: number, params?: Omit<PhasesQueryParams, 'projectId'>): Promise<PhasesListResponse> {\n    return this.list({ ...params, projectId });\n  }\n\n  async getByStatus(status: 'Not Started' | 'In Progress' | 'Completed' | 'On Hold', params?: Omit<PhasesQueryParams, 'status'>): Promise<PhasesListResponse> {\n    return this.list({ ...params, status });\n  }\n\n  async getActive(params?: Omit<PhasesQueryParams, 'archived'>): Promise<PhasesListResponse> {\n    return this.list({ ...params, archived: false });\n  }\n\n  async getArchived(params?: Omit<PhasesQueryParams, 'archived'>): Promise<PhasesListResponse> {\n    return this.list({ ...params, archived: true });\n  }\n\n  async search(query: string, params?: Omit<PhasesQueryParams, 'search'>): Promise<PhasesListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  async getNotStarted(params?: Omit<PhasesQueryParams, 'status'>): Promise<PhasesListResponse> {\n    return this.getByStatus('Not Started', params);\n  }\n\n  async getInProgress(params?: Omit<PhasesQueryParams, 'status'>): Promise<PhasesListResponse> {\n    return this.getByStatus('In Progress', params);\n  }\n\n  async getCompleted(params?: Omit<PhasesQueryParams, 'status'>): Promise<PhasesListResponse> {\n    return this.getByStatus('Completed', params);\n  }\n\n  async getOnHold(params?: Omit<PhasesQueryParams, 'status'>): Promise<PhasesListResponse> {\n    return this.getByStatus('On Hold', params);\n  }\n\n  async getByDateRange(startDateFrom: string, startDateTo: string, params?: Omit<PhasesQueryParams, 'startDateFrom' | 'startDateTo'>): Promise<PhasesListResponse> {\n    return this.list({ ...params, startDateFrom, startDateTo });\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: PhasesListResponse, originalParams?: PhasesQueryParams): Promise<PhasesListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllPhases(params?: PhasesQueryParams): Promise<Phase[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iteratePhasePages(params?: PhasesQueryParams): AsyncGenerator<PhasesListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iteratePhases(params?: PhasesQueryParams): AsyncGenerator<Phase, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { BaseResource } from '../utils/base-resource';\n\nexport interface TimeOff {\n  timeOffId: number;\n  userId: number;\n  userFirstName: string;\n  userLastName?: string;\n  startDate: string;\n  endDate: string;\n  type: 'vacation' | 'sick' | 'personal' | 'holiday' | 'other';\n  status: 'pending' | 'approved' | 'rejected';\n  reason?: string;\n  approvedBy?: {\n    userId: number;\n    firstName: string;\n    lastName?: string;\n  };\n  createdAt: number;\n  updatedAt: number;\n}\n\nexport interface TimeOffsListResponse {\n  data: TimeOff[];\n  pagination: {\n    pageSize: number;\n    hasMore: boolean;\n    totalRecordCount: number;\n    nextPage?: string;\n    nextPageToken?: string;\n  };\n}\n\nexport interface CreateTimeOffRequest {\n  startDate: string;\n  endDate: string;\n  type: 'vacation' | 'sick' | 'personal' | 'holiday' | 'other';\n  reason?: string;\n  userId?: number;\n  [key: string]: unknown;\n}\n\nexport interface UpdateTimeOffRequest {\n  startDate?: string;\n  endDate?: string;\n  type?: 'vacation' | 'sick' | 'personal' | 'holiday' | 'other';\n  reason?: string;\n  status?: 'pending' | 'approved' | 'rejected';\n  [key: string]: unknown;\n}\n\nexport interface TimeOffsQueryParams {\n  pageSize?: number;\n  pageToken?: string;\n  userId?: number;\n  type?: 'vacation' | 'sick' | 'personal' | 'holiday' | 'other';\n  status?: 'pending' | 'approved' | 'rejected';\n  startDateFrom?: string;\n  startDateTo?: string;\n  endDateFrom?: string;\n  endDateTo?: string;\n  sortBy?: 'startDate' | 'endDate' | 'createdAt' | 'updatedAt' | 'status';\n  sortOrder?: 'asc' | 'desc';\n  [key: string]: unknown;\n}\n\nexport class TimeOffsResource extends BaseResource {\n\n  async list(params?: TimeOffsQueryParams): Promise<TimeOffsListResponse> {\n    return this.httpClient.get<TimeOffsListResponse>('/api/1.0/time-offs', params);\n  }\n\n  async getTimeOff(timeOffId: number): Promise<TimeOff> {\n    return this.httpClient.get<TimeOff>(`/api/1.0/time-offs/${timeOffId}`);\n  }\n\n  async create(data: CreateTimeOffRequest): Promise<TimeOff> {\n    return this.httpClient.post<TimeOff>('/api/1.0/time-offs', data);\n  }\n\n  async update(timeOffId: number, data: UpdateTimeOffRequest): Promise<TimeOff> {\n    return this.httpClient.put<TimeOff>(`/api/1.0/time-offs/${timeOffId}`, data);\n  }\n\n  async deleteResource(timeOffId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/time-offs/${timeOffId}`);\n  }\n\n  async approve(timeOffId: number): Promise<TimeOff> {\n    return this.httpClient.post<TimeOff>(`/api/1.0/time-offs/${timeOffId}/approve`);\n  }\n\n  async reject(timeOffId: number, reason?: string): Promise<TimeOff> {\n    return this.httpClient.post<TimeOff>(`/api/1.0/time-offs/${timeOffId}/reject`, { reason });\n  }\n\n  async getByUser(userId: number, params?: Omit<TimeOffsQueryParams, 'userId'>): Promise<TimeOffsListResponse> {\n    return this.list({ ...params, userId });\n  }\n\n  async getByStatus(status: 'pending' | 'approved' | 'rejected', params?: Omit<TimeOffsQueryParams, 'status'>): Promise<TimeOffsListResponse> {\n    return this.list({ ...params, status });\n  }\n\n  async getByType(type: 'vacation' | 'sick' | 'personal' | 'holiday' | 'other', params?: Omit<TimeOffsQueryParams, 'type'>): Promise<TimeOffsListResponse> {\n    return this.list({ ...params, type });\n  }\n\n  async getPending(params?: Omit<TimeOffsQueryParams, 'status'>): Promise<TimeOffsListResponse> {\n    return this.getByStatus('pending', params);\n  }\n\n  async getApproved(params?: Omit<TimeOffsQueryParams, 'status'>): Promise<TimeOffsListResponse> {\n    return this.getByStatus('approved', params);\n  }\n\n  async getRejected(params?: Omit<TimeOffsQueryParams, 'status'>): Promise<TimeOffsListResponse> {\n    return this.getByStatus('rejected', params);\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: TimeOffsListResponse, originalParams?: TimeOffsQueryParams): Promise<TimeOffsListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllTimeOffs(params?: TimeOffsQueryParams): Promise<TimeOff[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateTimeOffPages(params?: TimeOffsQueryParams): AsyncGenerator<TimeOffsListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateTimeOffs(params?: TimeOffsQueryParams): AsyncGenerator<TimeOff, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { BaseResource } from '../utils/base-resource';\nimport { NavigableUser, NavigableObjectFactory } from '../utils/relationship-navigation';\nimport {\n  User,\n  UsersListResponse,\n  UsersQueryParams,\n  CreateUserRequest,\n  UpdateUserRequest,\n  InviteUserRequest,\n  BulkInviteUsersRequest,\n} from '../types/users';\n\nexport class UsersResource extends BaseResource {\n  private navFactory?: NavigableObjectFactory;\n\n  async list(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.httpClient.get<UsersListResponse>('/api/1.0/users', params);\n  }\n\n  async getUser(userId: number, includeFields?: string): Promise<User> {\n    const params = includeFields ? { includeFields } : undefined;\n    return this.httpClient.get<User>(`/api/1.0/users/${userId}`, params);\n  }\n\n  async create(data: CreateUserRequest): Promise<User> {\n    return this.httpClient.post<User>('/api/1.0/users', data);\n  }\n\n  async update(userId: number, data: UpdateUserRequest): Promise<User> {\n    return this.httpClient.put<User>(`/api/1.0/users/${userId}`, data);\n  }\n\n  async deleteResource(userId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/users/${userId}`);\n  }\n\n  async invite(data: InviteUserRequest): Promise<User> {\n    return this.httpClient.post<User>('/api/1.0/users/invite', data);\n  }\n\n  async bulkInvite(data: BulkInviteUsersRequest): Promise<User[]> {\n    return this.httpClient.post<User[]>('/api/1.0/users/bulk-invite', data);\n  }\n\n  async activate(userId: number): Promise<User> {\n    return this.httpClient.post<User>(`/api/1.0/users/${userId}/activate`);\n  }\n\n  async deactivate(userId: number): Promise<User> {\n    return this.httpClient.post<User>(`/api/1.0/users/${userId}/deactivate`);\n  }\n\n  async resendInvite(userId: number): Promise<void> {\n    return this.httpClient.post<void>(`/api/1.0/users/${userId}/resend-invite`);\n  }\n\n  async getByCompany(companyId: number, params?: Omit<UsersQueryParams, 'companyId'>): Promise<UsersListResponse> {\n    return this.list({ ...params, companyId });\n  }\n\n  async getByType(type: 'TEAM_MEMBER' | 'PARTNER' | 'CUSTOMER', params?: Omit<UsersQueryParams, 'type'>): Promise<UsersListResponse> {\n    return this.list({ ...params, type });\n  }\n\n  async getByStatus(status: 'INACTIVE' | 'INVITED' | 'ACTIVE', params?: Omit<UsersQueryParams, 'status'>): Promise<UsersListResponse> {\n    return this.list({ ...params, status });\n  }\n\n  async search(query: string, params?: Omit<UsersQueryParams, 'search'>): Promise<UsersListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  async getTeamMembers(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.getByType('TEAM_MEMBER', params);\n  }\n\n  async getPartners(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.getByType('PARTNER', params);\n  }\n\n  async getCustomers(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.getByType('CUSTOMER', params);\n  }\n\n  async getActive(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.getByStatus('ACTIVE', params);\n  }\n\n  async getInvited(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.getByStatus('INVITED', params);\n  }\n\n  async getInactive(params?: UsersQueryParams): Promise<UsersListResponse> {\n    return this.getByStatus('INACTIVE', params);\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: UsersListResponse, originalParams?: UsersQueryParams): Promise<UsersListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllUsers(params?: UsersQueryParams): Promise<User[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateUserPages(params?: UsersQueryParams): AsyncGenerator<UsersListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateUsers(params?: UsersQueryParams): AsyncGenerator<User, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n\n  // Relationship Navigation\n\n  /**\n   * Set the navigation factory (called by client)\n   */\n  setNavigationFactory(factory: NavigableObjectFactory): void {\n    this.navFactory = factory;\n  }\n\n  /**\n   * Get a navigable user with relationship methods\n   */\n  async getNavigable(userId: number): Promise<NavigableUser> {\n    const user = await this.getUser(userId);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return this.navFactory.createNavigableUser(user);\n  }\n\n  /**\n   * List users as navigable objects\n   */\n  async listNavigable(params?: UsersQueryParams): Promise<NavigableUser[]> {\n    const response = await this.list(params);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return response.data.map(user => this.navFactory!.createNavigableUser(user));\n  }\n\n  /**\n   * Get all users as navigable objects\n   */\n  async getAllNavigableUsers(params?: UsersQueryParams): Promise<NavigableUser[]> {\n    const users = await this.getAllUsers(params);\n    if (!this.navFactory) {\n      throw new Error('Navigation factory not initialized');\n    }\n    return users.map(user => this.navFactory!.createNavigableUser(user));\n  }\n}","import { BaseResource } from '../utils/base-resource';\n\nexport interface Space {\n  spaceId: number;\n  spaceName: string;\n  description?: string;\n  type: 'project' | 'team' | 'company' | 'personal';\n  visibility: 'public' | 'private' | 'restricted';\n  ownerId: number;\n  ownerFirstName: string;\n  ownerLastName?: string;\n  members: Array<{\n    userId: number;\n    firstName: string;\n    lastName?: string;\n    role: string;\n  }>;\n  projectId?: number;\n  archived: boolean;\n  createdAt: number;\n  createdBy: {\n    userId: number;\n    firstName: string;\n    lastName?: string;\n  };\n  updatedAt: number;\n  updatedBy: {\n    userId: number;\n    firstName: string;\n    lastName?: string;\n  };\n}\n\nexport interface SpacesListResponse {\n  data: Space[];\n  pagination: {\n    pageSize: number;\n    hasMore: boolean;\n    totalRecordCount: number;\n    nextPage?: string;\n    nextPageToken?: string;\n  };\n}\n\nexport interface CreateSpaceRequest {\n  spaceName: string;\n  description?: string;\n  type: 'project' | 'team' | 'company' | 'personal';\n  visibility: 'public' | 'private' | 'restricted';\n  projectId?: number;\n  members?: number[];\n  [key: string]: unknown;\n}\n\nexport interface UpdateSpaceRequest {\n  spaceName?: string;\n  description?: string;\n  visibility?: 'public' | 'private' | 'restricted';\n  [key: string]: unknown;\n}\n\nexport interface SpacesQueryParams {\n  pageSize?: number;\n  pageToken?: string;\n  type?: 'project' | 'team' | 'company' | 'personal';\n  visibility?: 'public' | 'private' | 'restricted';\n  ownerId?: number;\n  projectId?: number;\n  archived?: boolean;\n  search?: string;\n  sortBy?: 'spaceName' | 'type' | 'createdAt' | 'updatedAt';\n  sortOrder?: 'asc' | 'desc';\n  [key: string]: unknown;\n}\n\nexport interface AddSpaceMembersRequest {\n  members: Array<{\n    userId: number;\n    role: string;\n  }>;\n  [key: string]: unknown;\n}\n\nexport interface RemoveSpaceMembersRequest {\n  members: number[];\n  [key: string]: unknown;\n}\n\nexport class SpacesResource extends BaseResource {\n\n  async list(params?: SpacesQueryParams): Promise<SpacesListResponse> {\n    return this.httpClient.get<SpacesListResponse>('/api/1.0/spaces', params);\n  }\n\n  async getSpace(spaceId: number): Promise<Space> {\n    return this.httpClient.get<Space>(`/api/1.0/spaces/${spaceId}`);\n  }\n\n  async create(data: CreateSpaceRequest): Promise<Space> {\n    return this.httpClient.post<Space>('/api/1.0/spaces', data);\n  }\n\n  async update(spaceId: number, data: UpdateSpaceRequest): Promise<Space> {\n    return this.httpClient.put<Space>(`/api/1.0/spaces/${spaceId}`, data);\n  }\n\n  async deleteResource(spaceId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/spaces/${spaceId}`);\n  }\n\n  async archive(spaceId: number): Promise<Space> {\n    return this.httpClient.post<Space>(`/api/1.0/spaces/${spaceId}/archive`);\n  }\n\n  async unarchive(spaceId: number): Promise<Space> {\n    return this.httpClient.post<Space>(`/api/1.0/spaces/${spaceId}/unarchive`);\n  }\n\n  async addMembers(spaceId: number, data: AddSpaceMembersRequest): Promise<Space> {\n    return this.httpClient.post<Space>(`/api/1.0/spaces/${spaceId}/members`, data);\n  }\n\n  async removeMembers(spaceId: number, data: RemoveSpaceMembersRequest): Promise<Space> {\n    return this.httpClient.delete<Space>(`/api/1.0/spaces/${spaceId}/members`, data);\n  }\n\n  async getByType(type: 'project' | 'team' | 'company' | 'personal', params?: Omit<SpacesQueryParams, 'type'>): Promise<SpacesListResponse> {\n    return this.list({ ...params, type });\n  }\n\n  async getByVisibility(visibility: 'public' | 'private' | 'restricted', params?: Omit<SpacesQueryParams, 'visibility'>): Promise<SpacesListResponse> {\n    return this.list({ ...params, visibility });\n  }\n\n  async getByOwner(ownerId: number, params?: Omit<SpacesQueryParams, 'ownerId'>): Promise<SpacesListResponse> {\n    return this.list({ ...params, ownerId });\n  }\n\n  async getByProject(projectId: number, params?: Omit<SpacesQueryParams, 'projectId'>): Promise<SpacesListResponse> {\n    return this.list({ ...params, projectId });\n  }\n\n  async getPublic(params?: Omit<SpacesQueryParams, 'visibility'>): Promise<SpacesListResponse> {\n    return this.getByVisibility('public', params);\n  }\n\n  async getPrivate(params?: Omit<SpacesQueryParams, 'visibility'>): Promise<SpacesListResponse> {\n    return this.getByVisibility('private', params);\n  }\n\n  async search(query: string, params?: Omit<SpacesQueryParams, 'search'>): Promise<SpacesListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: SpacesListResponse, originalParams?: SpacesQueryParams): Promise<SpacesListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllSpaces(params?: SpacesQueryParams): Promise<Space[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateSpacePages(params?: SpacesQueryParams): AsyncGenerator<SpacesListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateSpaces(params?: SpacesQueryParams): AsyncGenerator<Space, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { BaseResource } from '../utils/base-resource';\nimport {\n  TimeEntry,\n  TimeEntriesListResponse,\n  CreateTimeEntryRequest,\n  UpdateTimeEntryRequest,\n  TimeEntriesQueryParams,\n  BulkCreateTimeEntriesRequest,\n  BulkUpdateTimeEntriesRequest,\n  BulkDeleteTimeEntriesRequest,\n  ApproveTimeEntriesRequest,\n  RejectTimeEntriesRequest,\n  TimeEntryCategory,\n  TimeEntryCategoriesListResponse,\n  CreateTimeEntryCategoryRequest,\n  UpdateTimeEntryCategoryRequest,\n  TimeEntryReport,\n  TimeEntryReportParams,\n} from '../types/time-tracking';\n\nexport class TimeTrackingResource extends BaseResource {\n\n  // Time Entries\n  async list(params?: TimeEntriesQueryParams): Promise<TimeEntriesListResponse> {\n    return this.httpClient.get<TimeEntriesListResponse>('/api/1.0/time-entries', params);\n  }\n\n  async getTimeEntry(timeEntryId: number): Promise<TimeEntry> {\n    return this.httpClient.get<TimeEntry>(`/api/1.0/time-entries/${timeEntryId}`);\n  }\n\n  async create(data: CreateTimeEntryRequest): Promise<TimeEntry> {\n    return this.httpClient.post<TimeEntry>('/api/1.0/time-entries', data);\n  }\n\n  async update(timeEntryId: number, data: UpdateTimeEntryRequest): Promise<TimeEntry> {\n    return this.httpClient.put<TimeEntry>(`/api/1.0/time-entries/${timeEntryId}`, data);\n  }\n\n  async deleteTimeEntry(timeEntryId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/time-entries/${timeEntryId}`);\n  }\n\n  async bulkCreate(data: BulkCreateTimeEntriesRequest): Promise<TimeEntry[]> {\n    return this.httpClient.post<TimeEntry[]>('/api/1.0/time-entries/bulk', data);\n  }\n\n  async bulkUpdate(data: BulkUpdateTimeEntriesRequest): Promise<TimeEntry[]> {\n    return this.httpClient.put<TimeEntry[]>('/api/1.0/time-entries/bulk', data);\n  }\n\n  async bulkDelete(data: BulkDeleteTimeEntriesRequest): Promise<void> {\n    return this.httpClient.delete<void>('/api/1.0/time-entries/bulk', data);\n  }\n\n  async approve(data: ApproveTimeEntriesRequest): Promise<TimeEntry[]> {\n    return this.httpClient.post<TimeEntry[]>('/api/1.0/time-entries/approve', data);\n  }\n\n  async reject(data: RejectTimeEntriesRequest): Promise<TimeEntry[]> {\n    return this.httpClient.post<TimeEntry[]>('/api/1.0/time-entries/reject', data);\n  }\n\n  // Time Entry Categories\n  async getCategories(): Promise<TimeEntryCategoriesListResponse> {\n    return this.httpClient.get<TimeEntryCategoriesListResponse>('/api/1.0/time-entry-categories');\n  }\n\n  async getCategory(categoryId: number): Promise<TimeEntryCategory> {\n    return this.httpClient.get<TimeEntryCategory>(`/api/1.0/time-entry-categories/${categoryId}`);\n  }\n\n  async createCategory(data: CreateTimeEntryCategoryRequest): Promise<TimeEntryCategory> {\n    return this.httpClient.post<TimeEntryCategory>('/api/1.0/time-entry-categories', data);\n  }\n\n  async updateCategory(categoryId: number, data: UpdateTimeEntryCategoryRequest): Promise<TimeEntryCategory> {\n    return this.httpClient.put<TimeEntryCategory>(`/api/1.0/time-entry-categories/${categoryId}`, data);\n  }\n\n  async deleteCategory(categoryId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/time-entry-categories/${categoryId}`);\n  }\n\n  // Helper methods for filtering\n  async getByProject(projectId: number, params?: Omit<TimeEntriesQueryParams, 'projectId'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, projectId });\n  }\n\n  async getByUser(userId: number, params?: Omit<TimeEntriesQueryParams, 'userId'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, userId });\n  }\n\n  async getByPhase(phaseId: number, params?: Omit<TimeEntriesQueryParams, 'phaseId'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, phaseId });\n  }\n\n  async getByTask(taskId: number, params?: Omit<TimeEntriesQueryParams, 'taskId'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, taskId });\n  }\n\n  async getByCategory(categoryId: number, params?: Omit<TimeEntriesQueryParams, 'categoryId'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, categoryId });\n  }\n\n  async getBillable(params?: Omit<TimeEntriesQueryParams, 'billable'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, billable: true });\n  }\n\n  async getNonBillable(params?: Omit<TimeEntriesQueryParams, 'billable'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, billable: false });\n  }\n\n  async getApproved(params?: Omit<TimeEntriesQueryParams, 'approved'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, approved: true });\n  }\n\n  async getPending(params?: Omit<TimeEntriesQueryParams, 'approved'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, approved: false });\n  }\n\n  async getByDateRange(dateFrom: string, dateTo: string, params?: Omit<TimeEntriesQueryParams, 'dateFrom' | 'dateTo'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, dateFrom, dateTo });\n  }\n\n  async search(query: string, params?: Omit<TimeEntriesQueryParams, 'search'>): Promise<TimeEntriesListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  // Reporting\n  async getReport(params?: TimeEntryReportParams): Promise<TimeEntryReport> {\n    return this.httpClient.get<TimeEntryReport>('/api/1.0/time-entries/report', params);\n  }\n\n  async exportReport(params?: TimeEntryReportParams & { format?: 'csv' | 'xlsx' }): Promise<Blob> {\n    return this.httpClient.get<Blob>('/api/1.0/time-entries/export', params);\n  }\n\n  // Timer functionality (if supported)\n  async startTimer(data: { projectId: number; phaseId?: number; taskId?: number; categoryId: number; description?: string }): Promise<{ timerId: string; startedAt: number }> {\n    return this.httpClient.post('/api/1.0/time-entries/timer/start', data);\n  }\n\n  async stopTimer(timerId: string): Promise<TimeEntry> {\n    return this.httpClient.post<TimeEntry>(`/api/1.0/time-entries/timer/${timerId}/stop`);\n  }\n\n  async pauseTimer(timerId: string): Promise<{ timerId: string; pausedAt: number }> {\n    return this.httpClient.post(`/api/1.0/time-entries/timer/${timerId}/pause`);\n  }\n\n  async resumeTimer(timerId: string): Promise<{ timerId: string; resumedAt: number }> {\n    return this.httpClient.post(`/api/1.0/time-entries/timer/${timerId}/resume`);\n  }\n\n  async getActiveTimer(): Promise<{ timerId: string; startedAt: number; totalMinutes: number } | null> {\n    return this.httpClient.get('/api/1.0/time-entries/timer/active');\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: TimeEntriesListResponse, originalParams?: TimeEntriesQueryParams): Promise<TimeEntriesListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllTimeEntries(params?: TimeEntriesQueryParams): Promise<TimeEntry[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateTimeEntryPages(params?: TimeEntriesQueryParams): AsyncGenerator<TimeEntriesListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateTimeEntries(params?: TimeEntriesQueryParams): AsyncGenerator<TimeEntry, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { BaseResource } from '../utils/base-resource';\n\nexport interface SpaceDocument {\n  documentId: number;\n  documentName: string;\n  description?: string;\n  spaceId: number;\n  spaceName: string;\n  type: 'document' | 'spreadsheet' | 'presentation' | 'file';\n  mimeType?: string;\n  size?: number;\n  url?: string;\n  downloadUrl?: string;\n  version: number;\n  isLatest: boolean;\n  createdAt: number;\n  createdBy: {\n    userId: number;\n    firstName: string;\n    lastName?: string;\n  };\n  updatedAt: number;\n  updatedBy: {\n    userId: number;\n    firstName: string;\n    lastName?: string;\n  };\n  tags?: string[];\n}\n\nexport interface SpaceDocumentsListResponse {\n  data: SpaceDocument[];\n  pagination: {\n    pageSize: number;\n    hasMore: boolean;\n    totalRecordCount: number;\n    nextPage?: string;\n    nextPageToken?: string;\n  };\n}\n\nexport interface CreateSpaceDocumentRequest {\n  documentName: string;\n  spaceId: number;\n  description?: string;\n  type: 'document' | 'spreadsheet' | 'presentation' | 'file';\n  content?: string;\n  file?: File | ArrayBuffer;\n  tags?: string[];\n  [key: string]: unknown;\n}\n\nexport interface UpdateSpaceDocumentRequest {\n  documentName?: string;\n  description?: string;\n  content?: string;\n  tags?: string[];\n  [key: string]: unknown;\n}\n\nexport interface SpaceDocumentsQueryParams {\n  pageSize?: number;\n  pageToken?: string;\n  spaceId?: number;\n  type?: 'document' | 'spreadsheet' | 'presentation' | 'file';\n  createdBy?: number;\n  search?: string;\n  tags?: string[];\n  sortBy?: 'documentName' | 'type' | 'createdAt' | 'updatedAt' | 'size';\n  sortOrder?: 'asc' | 'desc';\n  [key: string]: unknown;\n}\n\nexport interface DocumentVersion {\n  versionId: number;\n  documentId: number;\n  version: number;\n  content?: string;\n  size?: number;\n  changes?: string;\n  createdAt: number;\n  createdBy: {\n    userId: number;\n    firstName: string;\n    lastName?: string;\n  };\n}\n\nexport interface DocumentVersionsListResponse {\n  data: DocumentVersion[];\n  pagination: {\n    pageSize: number;\n    hasMore: boolean;\n    totalRecordCount: number;\n    nextPage?: string;\n    nextPageToken?: string;\n  };\n}\n\nexport class SpaceDocumentsResource extends BaseResource {\n\n  async list(params?: SpaceDocumentsQueryParams): Promise<SpaceDocumentsListResponse> {\n    return this.httpClient.get<SpaceDocumentsListResponse>('/api/1.0/space-documents', params);\n  }\n\n  async getSpaceDocument(documentId: number): Promise<SpaceDocument> {\n    return this.httpClient.get<SpaceDocument>(`/api/1.0/space-documents/${documentId}`);\n  }\n\n  async create(data: CreateSpaceDocumentRequest): Promise<SpaceDocument> {\n    return this.httpClient.post<SpaceDocument>('/api/1.0/space-documents', data);\n  }\n\n  async update(documentId: number, data: UpdateSpaceDocumentRequest): Promise<SpaceDocument> {\n    return this.httpClient.put<SpaceDocument>(`/api/1.0/space-documents/${documentId}`, data);\n  }\n\n  async deleteResource(documentId: number): Promise<void> {\n    return this.httpClient.delete<void>(`/api/1.0/space-documents/${documentId}`);\n  }\n\n  async download(documentId: number): Promise<Blob> {\n    return this.httpClient.get<Blob>(`/api/1.0/space-documents/${documentId}/download`);\n  }\n\n  async getContent(documentId: number): Promise<{ content: string }> {\n    return this.httpClient.get<{ content: string }>(`/api/1.0/space-documents/${documentId}/content`);\n  }\n\n  async updateContent(documentId: number, content: string): Promise<SpaceDocument> {\n    return this.httpClient.put<SpaceDocument>(`/api/1.0/space-documents/${documentId}/content`, { content });\n  }\n\n  async duplicate(documentId: number, newDocumentName: string, spaceId?: number): Promise<SpaceDocument> {\n    return this.httpClient.post<SpaceDocument>(`/api/1.0/space-documents/${documentId}/duplicate`, {\n      documentName: newDocumentName,\n      spaceId,\n    });\n  }\n\n  async move(documentId: number, newSpaceId: number): Promise<SpaceDocument> {\n    return this.httpClient.post<SpaceDocument>(`/api/1.0/space-documents/${documentId}/move`, {\n      spaceId: newSpaceId,\n    });\n  }\n\n  // Version management\n  async getVersions(documentId: number): Promise<DocumentVersionsListResponse> {\n    return this.httpClient.get<DocumentVersionsListResponse>(`/api/1.0/space-documents/${documentId}/versions`);\n  }\n\n  async getVersion(documentId: number, version: number): Promise<DocumentVersion> {\n    return this.httpClient.get<DocumentVersion>(`/api/1.0/space-documents/${documentId}/versions/${version}`);\n  }\n\n  async restoreVersion(documentId: number, version: number): Promise<SpaceDocument> {\n    return this.httpClient.post<SpaceDocument>(`/api/1.0/space-documents/${documentId}/versions/${version}/restore`);\n  }\n\n  // Helper methods for filtering\n  async getBySpace(spaceId: number, params?: Omit<SpaceDocumentsQueryParams, 'spaceId'>): Promise<SpaceDocumentsListResponse> {\n    return this.list({ ...params, spaceId });\n  }\n\n  async getByType(type: 'document' | 'spreadsheet' | 'presentation' | 'file', params?: Omit<SpaceDocumentsQueryParams, 'type'>): Promise<SpaceDocumentsListResponse> {\n    return this.list({ ...params, type });\n  }\n\n  async getByCreator(createdBy: number, params?: Omit<SpaceDocumentsQueryParams, 'createdBy'>): Promise<SpaceDocumentsListResponse> {\n    return this.list({ ...params, createdBy });\n  }\n\n  async getByTags(tags: string[], params?: Omit<SpaceDocumentsQueryParams, 'tags'>): Promise<SpaceDocumentsListResponse> {\n    return this.list({ ...params, tags });\n  }\n\n  async search(query: string, params?: Omit<SpaceDocumentsQueryParams, 'search'>): Promise<SpaceDocumentsListResponse> {\n    return this.list({ ...params, search: query });\n  }\n\n  // Pagination helper methods\n  async getNextPage(response: SpaceDocumentsListResponse, originalParams?: SpaceDocumentsQueryParams): Promise<SpaceDocumentsListResponse | null> {\n    return this.getNextPageInternal(response, originalParams || {}, this.list.bind(this));\n  }\n\n  async getAllSpaceDocuments(params?: SpaceDocumentsQueryParams): Promise<SpaceDocument[]> {\n    return this.getAllPages(params || {}, this.list.bind(this));\n  }\n\n  iterateSpaceDocumentPages(params?: SpaceDocumentsQueryParams): AsyncGenerator<SpaceDocumentsListResponse, void, unknown> {\n    return this.iteratePages(params || {}, this.list.bind(this));\n  }\n\n  iterateSpaceDocuments(params?: SpaceDocumentsQueryParams): AsyncGenerator<SpaceDocument, void, unknown> {\n    return this.iterateItems(params || {}, this.list.bind(this));\n  }\n}","import { RocketlaneConfig } from './types/common';\nimport { HttpClient } from './utils/http-client';\nimport { ExportUtility, ImportUtility, ExportOptions, ImportOptions, ExportResult, ImportResult } from './utils/export-import';\nimport { NavigableObjectFactory } from './utils/relationship-navigation';\nimport { TasksResource } from './resources/tasks';\nimport { FieldsResource } from './resources/fields';\nimport { ProjectsResource } from './resources/projects';\nimport { ResourceAllocationsResource } from './resources/resource-allocations';\nimport { PhasesResource } from './resources/phases';\nimport { TimeOffsResource } from './resources/time-offs';\nimport { UsersResource } from './resources/users';\nimport { SpacesResource } from './resources/spaces';\nimport { TimeTrackingResource } from './resources/time-tracking';\nimport { SpaceDocumentsResource } from './resources/space-documents';\n\nexport class RocketlaneClient {\n  private httpClient: HttpClient;\n  private navFactory: NavigableObjectFactory;\n\n  public readonly tasks: TasksResource;\n  public readonly fields: FieldsResource;\n  public readonly projects: ProjectsResource;\n  public readonly resourceAllocations: ResourceAllocationsResource;\n  public readonly phases: PhasesResource;\n  public readonly timeOffs: TimeOffsResource;\n  public readonly users: UsersResource;\n  public readonly spaces: SpacesResource;\n  public readonly timeTracking: TimeTrackingResource;\n  public readonly spaceDocuments: SpaceDocumentsResource;\n  public readonly export: ExportManager;\n  public readonly import: ImportManager;\n\n  constructor(config: RocketlaneConfig) {\n    this.httpClient = new HttpClient(config);\n    this.navFactory = new NavigableObjectFactory(this);\n\n    this.tasks = new TasksResource(this.httpClient);\n    this.fields = new FieldsResource(this.httpClient);\n    this.projects = new ProjectsResource(this.httpClient);\n    this.resourceAllocations = new ResourceAllocationsResource(this.httpClient);\n    this.phases = new PhasesResource(this.httpClient);\n    this.timeOffs = new TimeOffsResource(this.httpClient);\n    this.users = new UsersResource(this.httpClient);\n    this.spaces = new SpacesResource(this.httpClient);\n    this.timeTracking = new TimeTrackingResource(this.httpClient);\n    this.spaceDocuments = new SpaceDocumentsResource(this.httpClient);\n    this.export = new ExportManager(this);\n    this.import = new ImportManager(this);\n\n    // Initialize navigation capabilities\n    this.initializeNavigationCapabilities();\n  }\n\n  private initializeNavigationCapabilities(): void {\n    // Set navigation factory for resources that support it\n    if ('setNavigationFactory' in this.tasks) {\n      (this.tasks as any).setNavigationFactory(this.navFactory);\n    }\n    if ('setNavigationFactory' in this.projects) {\n      (this.projects as any).setNavigationFactory(this.navFactory);\n    }\n    if ('setNavigationFactory' in this.users) {\n      (this.users as any).setNavigationFactory(this.navFactory);\n    }\n  }\n}\n\n// Export Manager for centralized export capabilities\nclass ExportManager {\n  constructor(private client: RocketlaneClient) {}\n\n  async tasks(params: any = {}, options: ExportOptions): Promise<ExportResult & { downloadUrl: string }> {\n    const allTasks = await this.client.tasks.getAllTasks(params);\n    return ExportUtility.generateExport(allTasks, options);\n  }\n\n  async projects(params: any = {}, options: ExportOptions): Promise<ExportResult & { downloadUrl: string }> {\n    const allProjects = await this.client.projects.getAllProjects(params);\n    return ExportUtility.generateExport(allProjects, options);\n  }\n\n  async users(params: any = {}, options: ExportOptions): Promise<ExportResult & { downloadUrl: string }> {\n    const allUsers = await this.client.users.getAllUsers(params);\n    return ExportUtility.generateExport(allUsers, options);\n  }\n\n  async timeEntries(params: any = {}, options: ExportOptions): Promise<ExportResult & { downloadUrl: string }> {\n    const allEntries = await this.client.timeTracking.getAllTimeEntries(params);\n    return ExportUtility.generateExport(allEntries, options);\n  }\n\n  // Generic export method\n  async data<T>(data: T[], options: ExportOptions): Promise<ExportResult & { downloadUrl: string }> {\n    return ExportUtility.generateExport(data, options);\n  }\n}\n\n// Import Manager for centralized import capabilities\nclass ImportManager {\n  constructor(private client: RocketlaneClient) {}\n\n  async tasks(content: string, format: 'csv' | 'json' | 'xlsx', options: ImportOptions = {}): Promise<ImportResult<any>> {\n    const data = this.parseContent(content, format);\n    \n    return ImportUtility.importData(\n      data,\n      async (item) => this.client.tasks.create(item),\n      options\n    );\n  }\n\n  async projects(content: string, format: 'csv' | 'json' | 'xlsx', options: ImportOptions = {}): Promise<ImportResult<any>> {\n    const data = this.parseContent(content, format);\n    \n    return ImportUtility.importData(\n      data,\n      async (item) => this.client.projects.create(item),\n      options\n    );\n  }\n\n  async users(content: string, format: 'csv' | 'json' | 'xlsx', options: ImportOptions = {}): Promise<ImportResult<any>> {\n    const data = this.parseContent(content, format);\n    \n    return ImportUtility.importData(\n      data,\n      async (item) => this.client.users.create(item),\n      options\n    );\n  }\n\n  // Generic import with custom create function\n  async data<T>(\n    content: string, \n    format: 'csv' | 'json' | 'xlsx',\n    createFn: (item: any) => Promise<T>,\n    options: ImportOptions = {}\n  ): Promise<ImportResult<T>> {\n    const data = this.parseContent(content, format);\n    return ImportUtility.importData(data, createFn, options);\n  }\n\n  // Validation without import\n  async validate(content: string, format: 'csv' | 'json' | 'xlsx', schema: Record<string, any>, options: ImportOptions = {}) {\n    const data = this.parseContent(content, format);\n    return ImportUtility.validateImportData(data, schema, options);\n  }\n\n  private parseContent(content: string, format: string): any[] {\n    switch (format) {\n      case 'csv':\n        return ImportUtility.parseCSV(content);\n      case 'json':\n        return ImportUtility.parseJSON(content);\n      case 'xlsx':\n        return ImportUtility.parseExcel(content);\n      default:\n        throw new Error(`Unsupported format: ${format}`);\n    }\n  }\n}","import { RocketlaneClient } from './client';\n\nexport { RocketlaneClient } from './client';\n\n// Core types\nexport * from './types/common';\nexport * from './types/tasks';\nexport type {\n  Project,\n  ProjectsListResponse,\n  CreateProjectRequest,\n  UpdateProjectRequest,\n  ProjectsQueryParams,\n} from './types/projects';\nexport type {\n  User,\n  UsersListResponse,\n  CreateUserRequest,\n  UpdateUserRequest,\n  UsersQueryParams,\n} from './types/users';\nexport * from './types/time-tracking';\nexport * from './types/fields';\nexport type {\n  Phase,\n  PhasesListResponse,\n  CreatePhaseRequest,\n  UpdatePhaseRequest,\n  PhasesQueryParams,\n} from './types/phases';\n\n// Resources\nexport * from './resources/tasks';\nexport * from './resources/projects';\nexport * from './resources/users';\nexport * from './resources/time-tracking';\nexport * from './resources/fields';\nexport * from './resources/phases';\nexport * from './resources/resource-allocations';\nexport * from './resources/time-offs';\nexport * from './resources/spaces';\nexport * from './resources/space-documents';\n\n// Utils\nexport * from './utils/http-client';\nexport { BaseResource } from './utils/base-resource';\n\nexport default RocketlaneClient;"]}